import { Component, EventEmitter, forwardRef, Inject, Input, Output, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, startWith, takeUntil } from 'rxjs/operators';
import { MatSelectCountryLangToken } from './tokens';
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export class MatSelectCountryComponent {
    constructor(i18n) {
        this.i18n = i18n;
        this.placeHolder = 'Select country';
        // tslint:disable-next-line: no-output-on-prefix
        this.onCountrySelected = new EventEmitter();
        this.debounceTime = 300;
        this.filterString = '';
        this.modelChanged = new Subject();
        this.propagateChange = (_) => { };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.propagateChange(this._value);
    }
    ngOnInit() {
        if (!this.countries) {
            // console.log('lang', this.i18n);
            this.loadingDB = true;
            this._importLang(this.i18n)
                .then((res) => {
                // console.log('countries', this.countries);
            }).catch((err) => console.error('Error: ' + err))
                .finally(() => this.loadingDB = false);
        }
        this.subscription = this.modelChanged
            .pipe(startWith(''), debounceTime(this.debounceTime))
            .subscribe((value) => {
            this.filterString = value;
            this._filter(value);
        });
    }
    ngOnChanges(changes) {
        // console.log('changes', changes);
        if (changes.country) {
            if (changes.country.currentValue) {
                const newValue = changes.country.currentValue.toUpperCase();
                this.value = this.countries.find((country) => country.name.toUpperCase() === newValue ||
                    country.alpha2Code === newValue ||
                    country.alpha3Code === newValue ||
                    country.numericCode === newValue);
            }
            else {
                this.value = undefined;
            }
        }
    }
    onBlur() {
        if (this.value && this.nullable) {
            this.value = null;
            this.onCountrySelected.emit(null);
        }
    }
    onOptionsSelected($event) {
        this.value = this.countries.find((country) => country.name === $event.option.value);
        this.onCountrySelected.emit(this.value);
    }
    writeValue(obj) {
        if (obj) {
            this.value = obj;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        // throw new Error('Method not implemented.');
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    autocompleteScroll() {
        if (this.itemsLoadSize) {
            setTimeout(() => {
                if (this.statesAutocompleteRef &&
                    this.autocompleteTrigger &&
                    this.statesAutocompleteRef.panel) {
                    fromEvent(this.statesAutocompleteRef.panel.nativeElement, 'scroll')
                        .pipe(takeUntil(this.autocompleteTrigger.panelClosingActions))
                        .subscribe(() => {
                        const scrollTop = this.statesAutocompleteRef.panel.nativeElement
                            .scrollTop;
                        const scrollHeight = this.statesAutocompleteRef.panel
                            .nativeElement.scrollHeight;
                        const elementHeight = this.statesAutocompleteRef.panel
                            .nativeElement.clientHeight;
                        const atBottom = scrollHeight === scrollTop + elementHeight;
                        if (atBottom) {
                            // fetch more data if not filtered
                            if (this.filterString === '') {
                                const fromIndex = this.filteredOptions.length;
                                const toIndex = +this.filteredOptions.length + +this.itemsLoadSize;
                                this.filteredOptions = [
                                    ...this.filteredOptions,
                                    ...this.countries.slice(fromIndex, toIndex),
                                ];
                            }
                        }
                    });
                }
            });
        }
    }
    inputChanged(value) {
        this.modelChanged.next(value);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    _importLang(i18n) {
        switch (i18n) {
            case 'de':
                return import('./i18n/de').then(result => result.COUNTRIES_DB_DE).then(y => {
                    this.countries = y;
                    return y;
                });
            case 'it':
                return import('./i18n/it').then(result => result.COUNTRIES_DB_IT).then(y => {
                    this.countries = y;
                    return y;
                });
            case 'es':
                return import('./i18n/es').then(result => result.COUNTRIES_DB_ES).then(y => {
                    this.countries = y;
                    return y;
                });
            case 'fr':
                return import('./i18n/fr').then(result => result.COUNTRIES_DB_FR).then(y => {
                    this.countries = y;
                    return y;
                });
            default:
                // console.log('running with default');
                return import('./i18n/en').then(result => result.COUNTRIES_DB).then(y => {
                    this.countries = y;
                    return y;
                });
        }
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        // if not filtered, fetch reduced array
        if (this.itemsLoadSize && filterValue === '') {
            this.filteredOptions = this.countries.slice(0, this.itemsLoadSize);
        }
        else {
            this.filteredOptions = this.countries.filter((option) => option.name.toLowerCase().includes(filterValue) ||
                option.alpha2Code.toLowerCase().includes(filterValue) ||
                option.alpha3Code.toLowerCase().includes(filterValue));
        }
    }
}
MatSelectCountryComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-select-country',
                template: "<mat-form-field [appearance]=\"appearance\">\n    <mat-label *ngIf=\"label\">{{label}}</mat-label>\n    <mat-icon *ngIf=\"this.value\" [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\" class=\"mr-12 s-20 secondary-text\"\n              matSuffix></mat-icon>\n    <input (blur)=\"onBlur()\" (input)=\"inputChanged($event?.target?.value)\"\n           [class]=\"class\"\n           [matAutocomplete]=\"this.countryAutocomplete\"\n           [placeholder]=\"this.placeHolder\"\n           [readonly]=\"this.readonly\"\n           [value]=\"this.value?.name\"\n           [required]=\"this.required\"\n           [disabled]=\"this.disabled || this.loadingDB\"\n           aria-label=\"country\"\n           matInput type=\"text\">\n    <mat-progress-bar *ngIf=\"this.loadingDB || this.loading\" mode=\"buffer\"></mat-progress-bar>\n    <mat-autocomplete #countryAutocomplete=\"matAutocomplete\" (opened)=\"autocompleteScroll()\"\n                      (optionSelected)=\"onOptionsSelected($event)\">\n        <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country?.name\">\n            <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n            <small>{{ [country?.name, country?.alpha3Code] | joinStrings }}</small>\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSelectCountryComponent),
                        multi: true,
                    },
                ],
                styles: [""]
            },] }
];
MatSelectCountryComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [forwardRef(() => MatSelectCountryLangToken),] }] }
];
MatSelectCountryComponent.propDecorators = {
    appearance: [{ type: Input }],
    countries: [{ type: Input }],
    label: [{ type: Input }],
    placeHolder: [{ type: Input }],
    required: [{ type: Input }],
    disabled: [{ type: Input }],
    nullable: [{ type: Input }],
    readonly: [{ type: Input }],
    class: [{ type: Input }],
    itemsLoadSize: [{ type: Input }],
    loading: [{ type: Input }],
    statesAutocompleteRef: [{ type: ViewChild, args: ['countryAutocomplete',] }],
    autocompleteTrigger: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }],
    onCountrySelected: [{ type: Output }],
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,