import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule, MatIconRegistry } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { DomSanitizer } from '@angular/platform-browser';
import { COUNTRIES_DB } from './i18n';
import { JoinStringsPipe } from './join.pipe';
import { MatSelectCountryComponent } from './mat-select-country.component';
import { MatSelectCountryLangToken } from './tokens';
/**
 * @author Anthony Nahas
 * @since 06.11.19
 */
// @dynamic
export class MatSelectCountryModule {
    constructor(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    static forRoot(i18n) {
        return {
            ngModule: MatSelectCountryModule,
            providers: [
                {
                    provide: MatSelectCountryLangToken,
                    useValue: i18n
                }
            ]
        };
    }
    registerCountries() {
        for (const country of COUNTRIES_DB) {
            const countryAlpha2Code = country.alpha2Code.toLowerCase();
            try {
                this.iconRegistry
                    .addSvgIcon(countryAlpha2Code, this.sanitizer
                    .bypassSecurityTrustResourceUrl(`assets/svg-country-flags/svg/${countryAlpha2Code}.svg`));
            }
            catch (err) {
                console.error('Error: icon not found for ' + countryAlpha2Code, err);
            }
        }
    }
}
MatSelectCountryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MatSelectCountryComponent,
                    JoinStringsPipe
                ],
                imports: [
                    CommonModule,
                    // Forms
                    FormsModule,
                    ReactiveFormsModule,
                    // Material
                    MatButtonModule,
                    MatMenuModule,
                    MatInputModule,
                    MatAutocompleteModule,
                    MatIconModule,
                    MatProgressBarModule,
                ],
                exports: [MatSelectCountryComponent],
            },] }
];
MatSelectCountryModule.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9zZWxlY3QtY291bnRyeS9zcmMvbGliL21hdC1zZWxlY3QtY291bnRyeS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDOUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBSXJEOzs7R0FHRztBQUNILFdBQVc7QUF1QlgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUNVLFlBQTZCLEVBQzdCLFNBQXVCO1FBRHZCLGlCQUFZLEdBQVosWUFBWSxDQUFpQjtRQUM3QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBRS9CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQXdDO1FBQ3JELE9BQU87WUFDTCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLFNBQVMsRUFDUDtnQkFDRTtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsSUFBSTtpQkFDZjthQUNGO1NBQ0osQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUI7UUFDZixLQUFLLE1BQU0sT0FBTyxJQUFJLFlBQVksRUFBRTtZQUNsQyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0QsSUFBSTtnQkFDRixJQUFJLENBQUMsWUFBWTtxQkFDZCxVQUFVLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVM7cUJBQzFDLDhCQUE4QixDQUFDLGdDQUFnQyxpQkFBaUIsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUMvRjtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEdBQUcsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDdEU7U0FDRjtJQUNILENBQUM7OztZQXRERixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLHlCQUF5QjtvQkFDekIsZUFBZTtpQkFDaEI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBRVosUUFBUTtvQkFDUixXQUFXO29CQUNYLG1CQUFtQjtvQkFFbkIsV0FBVztvQkFDWCxlQUFlO29CQUNmLGFBQWE7b0JBQ2IsY0FBYztvQkFDZCxxQkFBcUI7b0JBQ3JCLGFBQWE7b0JBQ2Isb0JBQW9CO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzthQUNyQzs7O1lBdEN1QixlQUFlO1lBSTlCLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0QXV0b2NvbXBsZXRlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlJztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQgeyBNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IE1hdElucHV0TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xuaW1wb3J0IHsgTWF0TWVudU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xuaW1wb3J0IHsgTWF0UHJvZ3Jlc3NCYXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBDT1VOVFJJRVNfREIgfSBmcm9tICcuL2kxOG4nO1xuaW1wb3J0IHsgSm9pblN0cmluZ3NQaXBlIH0gZnJvbSAnLi9qb2luLnBpcGUnO1xuaW1wb3J0IHsgTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudCB9IGZyb20gJy4vbWF0LXNlbGVjdC1jb3VudHJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXRTZWxlY3RDb3VudHJ5TGFuZ1Rva2VuIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5leHBvcnQgdHlwZSBNYXRTZWxlY3RDb3VudHJ5U3VwcG9ydGVkTGFuZ3VhZ2VzID0gJ2VuJyB8ICdkZScgfCAnZnInIHwgJ2VzJyB8ICdpdCc7XG5cbi8qKlxuICogQGF1dGhvciBBbnRob255IE5haGFzXG4gKiBAc2luY2UgMDYuMTEuMTlcbiAqL1xuLy8gQGR5bmFtaWNcbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE1hdFNlbGVjdENvdW50cnlDb21wb25lbnQsXG4gICAgSm9pblN0cmluZ3NQaXBlXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG5cbiAgICAvLyBGb3Jtc1xuICAgIEZvcm1zTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG5cbiAgICAvLyBNYXRlcmlhbFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRNZW51TW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICAgIE1hdEF1dG9jb21wbGV0ZU1vZHVsZSxcbiAgICBNYXRJY29uTW9kdWxlLFxuICAgIE1hdFByb2dyZXNzQmFyTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIE1hdFNlbGVjdENvdW50cnlNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGljb25SZWdpc3RyeTogTWF0SWNvblJlZ2lzdHJ5LFxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcbiAgKSB7XG4gICAgdGhpcy5yZWdpc3RlckNvdW50cmllcygpO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoaTE4bjogTWF0U2VsZWN0Q291bnRyeVN1cHBvcnRlZExhbmd1YWdlcyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWF0U2VsZWN0Q291bnRyeU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWF0U2VsZWN0Q291bnRyeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczpcbiAgICAgICAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE1hdFNlbGVjdENvdW50cnlMYW5nVG9rZW4sXG4gICAgICAgICAgICB1c2VWYWx1ZTogaTE4blxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH07XG4gIH1cblxuICByZWdpc3RlckNvdW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGNvdW50cnkgb2YgQ09VTlRSSUVTX0RCKSB7XG4gICAgICBjb25zdCBjb3VudHJ5QWxwaGEyQ29kZSA9IGNvdW50cnkuYWxwaGEyQ29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5pY29uUmVnaXN0cnlcbiAgICAgICAgICAuYWRkU3ZnSWNvbihjb3VudHJ5QWxwaGEyQ29kZSwgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAgIC5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoYGFzc2V0cy9zdmctY291bnRyeS1mbGFncy9zdmcvJHtjb3VudHJ5QWxwaGEyQ29kZX0uc3ZnYCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiBpY29uIG5vdCBmb3VuZCBmb3IgJyArIGNvdW50cnlBbHBoYTJDb2RlLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19