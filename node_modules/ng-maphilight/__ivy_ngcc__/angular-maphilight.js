import { Component, ElementRef, Input, KeyValueDiffers, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var MaphilightComponent = /** @class */ (function () {
    function MaphilightComponent(elRef, differs) {
        this.elRef = elRef;
        this.el = this.elRef.nativeElement;
        this.configDiffer = differs.find({}).create();
    }
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.img = this.el.querySelector('img');
        this.map = this.el.querySelector('map');
        var /** @type {?} */ id = this.el.getAttribute('id');
        this.img.setAttribute('usemap', '#' + id + ".map");
        this.map.setAttribute('id', id + ".map");
        this.map.setAttribute('name', id + ".map");
        this.drawCanvas();
    };
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.drawCanvas = /**
     * @return {?}
     */
    function () {
        window.jQuery(this.img).maphilight(this.configToApply());
    };
    
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ changes = this.configDiffer.diff(this.config);
        if (changes) {
            this.drawCanvas();
        }
    };
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.configToApply = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ config = Object.assign({}, this.config);
        if (config.strokeColor && config.strokeColor[0] == '#')
            config.strokeColor = config.strokeColor.substr(1);
        if (config.fillColor && config.fillColor[0] == '#')
            config.fillColor = config.fillColor.substr(1);
        if (config.shadowColor && config.shadowColor[0] == '#')
            config.shadowColor = config.shadowColor.substr(1);
        return config;
    };
    /** @nocollapse */
    MaphilightComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: KeyValueDiffers, },
    ]; };
    MaphilightComponent.propDecorators = {
        "config": [{ type: Input },],
    };
MaphilightComponent.ɵfac = function MaphilightComponent_Factory(t) { return new (t || MaphilightComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers)); };
MaphilightComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MaphilightComponent, selectors: [["maphilight"]], inputs: { config: "config" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function MaphilightComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaphilightComponent, [{
        type: Component,
        args: [{
                selector: 'maphilight',
                template: "<ng-content> </ng-content> ",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }]; }, { config: [{
            type: Input
        }] }); })();
    return MaphilightComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaphilightModule = /** @class */ (function () {
    function MaphilightModule() {
    }
    /** @nocollapse */
    MaphilightModule.ctorParameters = function () { return []; };
MaphilightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaphilightModule });
MaphilightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaphilightModule_Factory(t) { return new (t || MaphilightModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaphilightModule, { declarations: function () { return [MaphilightComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MaphilightComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaphilightModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [MaphilightComponent],
                exports: [MaphilightComponent]
            }]
    }], function () { return []; }, null); })();
    return MaphilightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MaphilightModule, MaphilightComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1tYXBoaWxpZ2h0LmpzIiwic291cmNlcyI6WyJhbmd1bGFyLW1hcGhpbGlnaHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BT007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQVNNO0FBQ047QUFDQTs7Ozs7Ozs7Ozs7Ozs7O2dEQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBLZXlWYWx1ZURpZmZlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG52YXIgTWFwaGlsaWdodENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBoaWxpZ2h0Q29tcG9uZW50KGVsUmVmLCBkaWZmZXJzKSB7XG4gICAgICAgIHRoaXMuZWxSZWYgPSBlbFJlZjtcbiAgICAgICAgdGhpcy5lbCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5jb25maWdEaWZmZXIgPSBkaWZmZXJzLmZpbmQoe30pLmNyZWF0ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE1hcGhpbGlnaHRDb21wb25lbnQucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmltZyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgICAgIHRoaXMubWFwID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdtYXAnKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaWQgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgdGhpcy5pbWcuc2V0QXR0cmlidXRlKCd1c2VtYXAnLCAnIycgKyBpZCArIFwiLm1hcFwiKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgXCIubWFwXCIpO1xuICAgICAgICB0aGlzLm1hcC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBpZCArIFwiLm1hcFwiKTtcbiAgICAgICAgdGhpcy5kcmF3Q2FudmFzKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE1hcGhpbGlnaHRDb21wb25lbnQucHJvdG90eXBlLmRyYXdDYW52YXMgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LmpRdWVyeSh0aGlzLmltZykubWFwaGlsaWdodCh0aGlzLmNvbmZpZ1RvQXBwbHkoKSk7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE1hcGhpbGlnaHRDb21wb25lbnQucHJvdG90eXBlLm5nRG9DaGVjayA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGFuZ2VzID0gdGhpcy5jb25maWdEaWZmZXIuZGlmZih0aGlzLmNvbmZpZyk7XG4gICAgICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYW52YXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBNYXBoaWxpZ2h0Q29tcG9uZW50LnByb3RvdHlwZS5jb25maWdUb0FwcGx5ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5zdHJva2VDb2xvciAmJiBjb25maWcuc3Ryb2tlQ29sb3JbMF0gPT0gJyMnKVxuICAgICAgICAgICAgY29uZmlnLnN0cm9rZUNvbG9yID0gY29uZmlnLnN0cm9rZUNvbG9yLnN1YnN0cigxKTtcbiAgICAgICAgaWYgKGNvbmZpZy5maWxsQ29sb3IgJiYgY29uZmlnLmZpbGxDb2xvclswXSA9PSAnIycpXG4gICAgICAgICAgICBjb25maWcuZmlsbENvbG9yID0gY29uZmlnLmZpbGxDb2xvci5zdWJzdHIoMSk7XG4gICAgICAgIGlmIChjb25maWcuc2hhZG93Q29sb3IgJiYgY29uZmlnLnNoYWRvd0NvbG9yWzBdID09ICcjJylcbiAgICAgICAgICAgIGNvbmZpZy5zaGFkb3dDb2xvciA9IGNvbmZpZy5zaGFkb3dDb2xvci5zdWJzdHIoMSk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcbiAgICBNYXBoaWxpZ2h0Q29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21hcGhpbGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD4gPC9uZy1jb250ZW50PiBcIixcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBbXCJcIl1cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIE1hcGhpbGlnaHRDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBLZXlWYWx1ZURpZmZlcnMsIH0sXG4gICAgXTsgfTtcbiAgICBNYXBoaWxpZ2h0Q29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICBcImNvbmZpZ1wiOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWFwaGlsaWdodENvbXBvbmVudDtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbnZhciBNYXBoaWxpZ2h0TW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcGhpbGlnaHRNb2R1bGUoKSB7XG4gICAgfVxuICAgIE1hcGhpbGlnaHRNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW01hcGhpbGlnaHRDb21wb25lbnRdLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbTWFwaGlsaWdodENvbXBvbmVudF1cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIE1hcGhpbGlnaHRNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gTWFwaGlsaWdodE1vZHVsZTtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0IHsgTWFwaGlsaWdodE1vZHVsZSwgTWFwaGlsaWdodENvbXBvbmVudCB9O1xuIl19