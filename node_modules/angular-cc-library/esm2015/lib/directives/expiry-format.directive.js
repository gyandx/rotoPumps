import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
let ExpiryFormatDirective = class ExpiryFormatDirective {
    constructor(el, control) {
        this.el = el;
        this.control = control;
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    updateValue(value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    }
    onKeypress(e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.restrictExpiry(e.which, this.target)) {
                this.formatExpiry(e);
                this.formatForwardSlashAndSpace(e);
                this.formatForwardExpiry(e);
            }
        }
        else {
            e.preventDefault();
            return false;
        }
    }
    onKeydown(e) {
        if (CreditCard.restrictNumeric(e) && CreditCard.restrictExpiry(e.which, this.target)) {
            this.formatBackExpiry(e);
        }
    }
    onChange() {
        this.reformatExpiry();
    }
    onInput() {
        this.reformatExpiry();
    }
    formatExpiry(e) {
        const digit = String.fromCharCode(e.which);
        const val = `${this.target.value}${digit}`;
        if (!/^\d+$/.test(digit)) {
            return;
        }
        if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
            e.preventDefault();
            this.updateValue(`0${val} / `);
        }
        else if (/^\d\d$/.test(val)) {
            e.preventDefault();
            const m1 = parseInt(val[0], 10);
            const m2 = parseInt(val[1], 10);
            if (m2 > 2 && m1 !== 0) {
                this.updateValue(`0${m1} / ${m2}`);
            }
            else {
                this.updateValue(`${val} / `);
            }
        }
    }
    formatForwardSlashAndSpace(e) {
        const which = String.fromCharCode(e.which);
        const val = this.target.value;
        if (!(which === '/' || which === ' ')) {
            return false;
        }
        if (/^\d$/.test(val) && val !== '0') {
            this.updateValue(`0${val} / `);
        }
    }
    formatForwardExpiry(e) {
        const digit = String.fromCharCode(e.which);
        const val = this.target.value;
        if (!/^\d+$/.test(digit) && /^\d\d$/.test(val)) {
            this.updateValue(this.target.value = `${val} / `);
        }
    }
    formatBackExpiry(e) {
        const val = this.target.valueOf;
        if (e.which !== 8) {
            return;
        }
        if ((this.target.selectionStart != null) && this.target.selectionStart !== val.length) {
            return;
        }
        if (/\d\s\/\s$/.test(val)) {
            e.preventDefault();
            this.updateValue(val.replace(/\d\s\/\s$/, ''));
        }
    }
    reformatExpiry() {
        const val = CreditCard.formatExpiry(CreditCard.replaceFullWidthChars(this.target.value));
        const oldVal = this.target.value;
        if (val !== oldVal) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (safeVal => {
                this.updateValue(safeVal);
            }));
        }
    }
};
ExpiryFormatDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
];
__decorate([
    HostListener('keypress', ['$event'])
], ExpiryFormatDirective.prototype, "onKeypress", null);
__decorate([
    HostListener('keydown', ['$event'])
], ExpiryFormatDirective.prototype, "onKeydown", null);
__decorate([
    HostListener('change')
], ExpiryFormatDirective.prototype, "onChange", null);
__decorate([
    HostListener('input')
], ExpiryFormatDirective.prototype, "onInput", null);
ExpiryFormatDirective = __decorate([
    Directive({
        selector: '[ccExp]',
    }),
    __param(1, Self()), __param(1, Optional())
], ExpiryFormatDirective);
export { ExpiryFormatDirective };
//# sourceMappingURL=data:application/json;base64,