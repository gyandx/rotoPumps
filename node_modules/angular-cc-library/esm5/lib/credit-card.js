var defaultFormat = /(\d{1,4})/g;
var cards = [
    {
        type: 'maestro',
        patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
        format: defaultFormat,
        length: [12, 13, 14, 15, 16, 17, 18, 19],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'forbrugsforeningen',
        patterns: [600],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'dankort',
        patterns: [5019],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'visa',
        patterns: [4],
        format: defaultFormat,
        length: [13, 16, 19],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'mastercard',
        patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'amex',
        patterns: [34, 37],
        format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
        length: [15],
        cvvLength: [3, 4],
        luhn: true,
    }, {
        type: 'dinersclub',
        patterns: [30, 36, 38, 39],
        format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
        length: [14],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'discover',
        patterns: [60, 64, 65, 622],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'unionpay',
        patterns: [62, 88],
        format: defaultFormat,
        length: [16, 17, 18, 19],
        cvvLength: [3],
        luhn: false,
    }, {
        type: 'jcb',
        patterns: [35],
        format: defaultFormat,
        length: [16, 19],
        cvvLength: [3],
        luhn: true,
    },
];
// @dynamic
var CreditCard = /** @class */ (function () {
    function CreditCard() {
    }
    CreditCard.cards = function () {
        return cards;
    };
    CreditCard.cardFromNumber = function (num) {
        num = (num + '').replace(/\D/g, '');
        for (var i = 0, len = cards.length; i < len; i++) {
            var card = cards[i];
            var ref = card.patterns;
            for (var j = 0, len1 = ref.length; j < len1; j++) {
                var pattern = ref[j];
                var p = pattern + '';
                if (num.substr(0, p.length) === p) {
                    return card;
                }
            }
        }
    };
    CreditCard.restrictNumeric = function (e) {
        if (e.metaKey || e.ctrlKey) {
            return true;
        }
        if (e.which === 32) {
            return false;
        }
        if (e.which === 0) {
            return true;
        }
        if (e.which < 33) {
            return true;
        }
        var input = String.fromCharCode(e.which);
        return !!/[\d\s]/.test(input);
    };
    CreditCard.hasTextSelected = function (target) {
        return target.selectionStart !== null && target.selectionStart !== target.selectionEnd;
    };
    CreditCard.cardType = function (num) {
        if (!num) {
            return num;
        }
        var card = this.cardFromNumber(num);
        if (card !== null && typeof card !== 'undefined') {
            return card.type;
        }
        else {
            return null;
        }
    };
    CreditCard.formatCardNumber = function (num) {
        num = num.replace(/\D/g, '');
        var card = this.cardFromNumber(num);
        if (!card) {
            return num;
        }
        var upperLength = card.length[card.length.length - 1];
        num = num.slice(0, upperLength);
        if (card.format.global) {
            var matches = num.match(card.format);
            if (matches != null) {
                return matches.join(' ');
            }
        }
        else {
            var groups = card.format.exec(num);
            if (groups == null) {
                return;
            }
            groups.shift();
            return groups.filter(Boolean).join(' ');
        }
    };
    CreditCard.safeVal = function (value, target, updateValue) {
        var cursor = null;
        var last = target.value;
        var result = null;
        try {
            cursor = target.selectionStart;
        }
        catch (error) { }
        updateValue(value);
        if (cursor !== null && target === document.activeElement) {
            if (cursor === last.length) {
                cursor = value.length;
            }
            if (last !== value) {
                var prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);
                var currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);
                var digit = value[cursor];
                if (/\d/.test(digit) && prevPair === (digit + " ") && currPair === (" " + digit)) {
                    cursor = cursor + 1;
                }
            }
            result = cursor;
        }
        return result;
    };
    CreditCard.isCardNumber = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit)) {
            return false;
        }
        if (CreditCard.hasTextSelected(target)) {
            return true;
        }
        var value = (target.value + digit).replace(/\D/g, '');
        var card = CreditCard.cardFromNumber(value);
        if (card) {
            return value.length <= card.length[card.length.length - 1];
        }
        else {
            return value.length <= 16;
        }
    };
    CreditCard.restrictExpiry = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
            return false;
        }
        var value = ("" + target.value + digit).replace(/\D/g, '');
        return value.length > 6;
    };
    CreditCard.replaceFullWidthChars = function (str) {
        if (str === null) {
            str = '';
        }
        var fullWidth = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19';
        var halfWidth = '0123456789';
        var value = '';
        var chars = str.split('');
        // tslint:disable-next-line:prefer-for-of
        for (var i = 0; i < chars.length; i++) {
            var chr = chars[i];
            var idx = fullWidth.indexOf(chr);
            if (idx > -1) {
                chr = halfWidth[idx];
            }
            value += chr;
        }
        return value;
    };
    CreditCard.formatExpiry = function (expiry) {
        var parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/);
        if (!parts) {
            return '';
        }
        var mon = parts[1] || '';
        var sep = parts[2] || '';
        var year = parts[3] || '';
        if (year.length > 0) {
            sep = ' / ';
        }
        else if (sep === ' /') {
            mon = mon.substring(0, 1);
            sep = '';
        }
        else if (mon.length === 2 || sep.length > 0) {
            sep = ' / ';
        }
        else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {
            mon = "0" + mon;
            sep = ' / ';
        }
        return "" + mon + sep + year;
    };
    CreditCard.restrictCvc = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
            return false;
        }
        var val = "" + target.value + digit;
        return val.length <= 4;
    };
    CreditCard.luhnCheck = function (num) {
        var digits = num.split('').reverse();
        var odd = true;
        var sum = 0;
        // tslint:disable-next-line:prefer-for-of
        for (var i = 0; i < digits.length; i++) {
            var digit = parseInt(digits[i], 10);
            // tslint:disable-next-line:no-conditional-assignment
            if ((odd = !odd)) {
                digit *= 2;
            }
            if (digit > 9) {
                digit -= 9;
            }
            sum += digit;
        }
        return sum % 10 === 0;
    };
    return CreditCard;
}());
export { CreditCard };
//# sourceMappingURL=data:application/json;base64,