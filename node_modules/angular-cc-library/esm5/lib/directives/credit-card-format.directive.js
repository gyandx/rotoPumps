import { __decorate, __param } from "tslib";
import { Directive, ElementRef, HostListener, Optional, Self } from '@angular/core';
import { CreditCard } from '../credit-card';
import { NgControl } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
var CreditCardFormatDirective = /** @class */ (function () {
    function CreditCardFormatDirective(el, control) {
        this.el = el;
        this.control = control;
        this.cards = CreditCard.cards();
        this.resolvedScheme$ = new BehaviorSubject('unknown');
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    CreditCardFormatDirective.prototype.updateValue = function (value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    };
    CreditCardFormatDirective.prototype.onKeypress = function (e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.isCardNumber(e.which, this.target)) {
                this.formatCardNumber(e);
            }
        }
        else {
            e.preventDefault();
        }
    };
    CreditCardFormatDirective.prototype.onKeydown = function (e) {
        this.formatBackCardNumber(e);
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onKeyup = function () {
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.onPaste = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onChange = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onInput = function () {
        this.reFormatCardNumber();
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.formatCardNumber = function (e) {
        var digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        var value = this.target.value;
        var card = CreditCard.cardFromNumber(value + digit);
        var length = (value.replace(/\D/g, '') + digit).length;
        var upperLength = card ? card.length[card.length.length - 1] : 19;
        if (length >= upperLength) {
            return;
        }
    };
    CreditCardFormatDirective.prototype.formatBackCardNumber = function (e) {
        var value = this.target.value;
        var selStart = this.target.selectionStart;
        if (e.which !== 8) {
            return;
        }
        if (selStart != null
            && selStart === this.target.selectionEnd
            && selStart > 0
            && selStart !== value.length
            && value[selStart - 1] === ' ') {
            e.preventDefault();
            if (selStart <= 2) {
                this.updateValue(value.slice(selStart));
                this.target.selectionStart = 0;
                this.target.selectionEnd = 0;
            }
            else {
                this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                this.target.selectionStart = selStart - 2;
                this.target.selectionEnd = selStart - 2;
            }
        }
    };
    CreditCardFormatDirective.prototype.setCardType = function () {
        var _this = this;
        var cardType = CreditCard.cardType(this.target.value) || 'unknown';
        this.resolvedScheme$.next(cardType);
        if (!this.target.classList.contains(cardType)) {
            this.cards.forEach(function (card) {
                _this.target.classList.remove(card.type);
            });
            this.target.classList.remove('unknown');
            this.target.classList.add(cardType);
            this.target.classList.toggle('identified', cardType !== 'unknown');
        }
    };
    CreditCardFormatDirective.prototype.reFormatCardNumber = function () {
        var _this = this;
        var value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
        var oldValue = this.target.value;
        if (value !== oldValue) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (function (safeVal) {
                _this.updateValue(safeVal);
            }));
        }
    };
    CreditCardFormatDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    __decorate([
        HostListener('keypress', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeypress", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeydown", null);
    __decorate([
        HostListener('keyup')
    ], CreditCardFormatDirective.prototype, "onKeyup", null);
    __decorate([
        HostListener('paste')
    ], CreditCardFormatDirective.prototype, "onPaste", null);
    __decorate([
        HostListener('change')
    ], CreditCardFormatDirective.prototype, "onChange", null);
    __decorate([
        HostListener('input')
    ], CreditCardFormatDirective.prototype, "onInput", null);
    CreditCardFormatDirective = __decorate([
        Directive({
            selector: '[ccNumber]',
            exportAs: 'ccNumber',
        }),
        __param(1, Self()), __param(1, Optional())
    ], CreditCardFormatDirective);
    return CreditCardFormatDirective;
}());
export { CreditCardFormatDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0LWNhcmQtZm9ybWF0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2MtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NyZWRpdC1jYXJkLWZvcm1hdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU12QztJQU1FLG1DQUNVLEVBQWMsRUFDTSxPQUFrQjtRQUR0QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ00sWUFBTyxHQUFQLE9BQU8sQ0FBVztRQU54QyxVQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTVCLG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQVMsU0FBUyxDQUFDLENBQUM7UUFNOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssK0NBQVcsR0FBbkIsVUFBb0IsS0FBYTtRQUMvQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBR00sOENBQVUsR0FBakIsVUFBa0IsQ0FBZ0I7UUFDaEMsSUFBSSxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxF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QUNGLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ25DLElBQUksS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsVUFBQSxPQUFPO2dCQUNyRyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDTDtJQUNILENBQUM7O2dCQTVIYSxVQUFVO2dCQUNlLFNBQVMsdUJBQTdDLElBQUksWUFBSSxRQUFROztJQWtCbkI7UUFEQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7K0RBU3BDO0lBR0Q7UUFEQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7OERBSW5DO0lBR0Q7UUFEQyxZQUFZLENBQUMsT0FBTyxDQUFDOzREQUdyQjtJQUdEO1FBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs0REFHckI7SUFHRDtRQURDLFlBQVksQ0FBQyxRQUFRLENBQUM7NkRBR3RCO0lBR0Q7UUFEQyxZQUFZLENBQUMsT0FBTyxDQUFDOzREQUlyQjtJQTdEVSx5QkFBeUI7UUFKckMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsUUFBUSxFQUFFLFVBQVU7U0FDckIsQ0FBQztRQVNHLFdBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxXQUFBLFFBQVEsRUFBRSxDQUFBO09BUlYseUJBQXlCLENBb0lyQztJQUFELGdDQUFDO0NBQUEsQUFwSUQsSUFvSUM7U0FwSVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIE9wdGlvbmFsLCBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDcmVkaXRDYXJkIH0gZnJvbSAnLi4vY3JlZGl0LWNhcmQnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjY051bWJlcl0nLFxuICBleHBvcnRBczogJ2NjTnVtYmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgQ3JlZGl0Q2FyZEZvcm1hdERpcmVjdGl2ZSB7XG4gIHByaXZhdGUgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIGNhcmRzID0gQ3JlZGl0Q2FyZC5jYXJkcygpO1xuXG4gIHB1YmxpYyByZXNvbHZlZFNjaGVtZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJ3Vua25vd24nKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICkge1xuICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZhbHVlIHRvIHRhcmdldCBlbGVtZW50LCBvciBGb3JtQ29udHJvbCBpZiBleGlzdHMuXG4gICAqIEBwYXJhbSB2YWx1ZSBOZXcgaW5wdXQgdmFsdWUuXG4gICAqL1xuICBwcml2YXRlIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLmNvbnRyb2wuY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5cHJlc3MnLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25LZXlwcmVzcyhlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKENyZWRpdENhcmQucmVzdHJpY3ROdW1lcmljKGUpKSB7XG4gICAgICBpZiAoQ3JlZGl0Q2FyZC5pc0NhcmROdW1iZXIoZS53aGljaCwgdGhpcy50YXJnZXQpKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0Q2FyZE51bWJlcihlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25LZXlkb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICB0aGlzLmZvcm1hdEJhY2tDYXJkTnVtYmVyKGUpO1xuICAgIHRoaXMucmVGb3JtYXRDYXJkTnVtYmVyKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcpXG4gIHB1YmxpYyBvbktleXVwKCkge1xuICAgIHRoaXMuc2V0Q2FyZFR5cGUoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3Bhc3RlJylcbiAgcHVibGljIG9uUGFzdGUoKSB7XG4gICAgdGhpcy5yZUZvcm1hdENhcmROdW1iZXIoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScpXG4gIHB1YmxpYyBvbkNoYW5nZSgpIHtcbiAgICB0aGlzLnJlRm9ybWF0Q2FyZE51bWJlcigpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW5wdXQnKVxuICBwdWJsaWMgb25JbnB1dCgpIHtcbiAgICB0aGlzLnJlRm9ybWF0Q2FyZE51bWJlcigpO1xuICAgIHRoaXMuc2V0Q2FyZFR5cGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0Q2FyZE51bWJlcihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgZGlnaXQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpO1xuICAgIGlmICghL15cXGQrJC8udGVzdChkaWdpdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGNhcmQgPSBDcmVkaXRDYXJkLmNhcmRGcm9tTnVtYmVyKHZhbHVlICsgZGlnaXQpO1xuICAgIGNvbnN0IGxlbmd0aCA9ICh2YWx1ZS5yZXBsYWNlKC9cXEQvZywgJycpICsgZGlnaXQpLmxlbmd0aDtcbiAgICBjb25zdCB1cHBlckxlbmd0aCA9IGNhcmQgPyBjYXJkLmxlbmd0aFtjYXJkLmxlbmd0aC5sZW5ndGggLSAxXSA6IDE5O1xuXG4gICAgaWYgKGxlbmd0aCA+PSB1cHBlckxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0QmFja0NhcmROdW1iZXIoZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy50YXJnZXQudmFsdWU7XG4gICAgY29uc3Qgc2VsU3RhcnQgPSB0aGlzLnRhcmdldC5zZWxlY3Rpb25TdGFydDtcblxuICAgIGlmIChlLndoaWNoICE9PSA4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlbFN0YXJ0ICE9IG51bGxcbiAgICAgICYmIHNlbFN0YXJ0ID09PSB0aGlzLnRhcmdldC5zZWxlY3Rpb25FbmRcbiAgICAgICYmIHNlbFN0YXJ0ID4gMFxuICAgICAgJiYgc2VsU3RhcnQgIT09IHZhbHVlLmxlbmd0aFxuICAgICAgJiYgdmFsdWVbc2VsU3RhcnQgLSAxXSA9PT0gJyAnKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2VsU3RhcnQgPD0gMikge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKHZhbHVlLnNsaWNlKHNlbFN0YXJ0KSk7XG4gICAgICAgIHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy50YXJnZXQuc2VsZWN0aW9uRW5kID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUodmFsdWUuc2xpY2UoMCwgc2VsU3RhcnQgLSAyKSArIHZhbHVlLnNsaWNlKHNlbFN0YXJ0KSk7XG4gICAgICAgIHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0ID0gc2VsU3RhcnQgLSAyO1xuICAgICAgICB0aGlzLnRhcmdldC5zZWxlY3Rpb25FbmQgPSBzZWxTdGFydCAtIDI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDYXJkVHlwZSgpIHtcbiAgICBjb25zdCBjYXJkVHlwZSA9IENyZWRpdENhcmQuY2FyZFR5cGUodGhpcy50YXJnZXQudmFsdWUpIHx8ICd1bmtub3duJztcblxuICAgIHRoaXMucmVzb2x2ZWRTY2hlbWUkLm5leHQoY2FyZFR5cGUpO1xuXG4gICAgaWYgKCF0aGlzLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoY2FyZFR5cGUpKSB7XG4gICAgICB0aGlzLmNhcmRzLmZvckVhY2goKGNhcmQpID0+IHtcbiAgICAgICAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjYXJkLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ3Vua25vd24nKTtcbiAgICAgIHRoaXMudGFyZ2V0LmNsYXNzTGlzdC5hZGQoY2FyZFR5cGUpO1xuICAgICAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnaWRlbnRpZmllZCcsIGNhcmRUeXBlICE9PSAndW5rbm93bicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVGb3JtYXRDYXJkTnVtYmVyKCkge1xuICAgIGNvbnN0IHZhbHVlID0gQ3JlZGl0Q2FyZC5mb3JtYXRDYXJkTnVtYmVyKFxuICAgICAgQ3JlZGl0Q2FyZC5yZXBsYWNlRnVsbFdpZHRoQ2hhcnModGhpcy50YXJnZXQudmFsdWUpLFxuICAgICk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnRhcmdldC52YWx1ZTtcbiAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLnRhcmdldC5zZWxlY3Rpb25TdGFydCA9IHRoaXMudGFyZ2V0LnNlbGVjdGlvbkVuZCA9IENyZWRpdENhcmQuc2FmZVZhbCh2YWx1ZSwgdGhpcy50YXJnZXQsIChzYWZlVmFsID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShzYWZlVmFsKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==