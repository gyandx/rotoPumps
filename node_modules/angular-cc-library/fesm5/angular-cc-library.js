import { __read, __decorate, __param } from 'tslib';
import { Validators, NgControl } from '@angular/forms';
import { ElementRef, Self, Optional, HostListener, Directive, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

var defaultFormat = /(\d{1,4})/g;
var cards = [
    {
        type: 'maestro',
        patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
        format: defaultFormat,
        length: [12, 13, 14, 15, 16, 17, 18, 19],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'forbrugsforeningen',
        patterns: [600],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'dankort',
        patterns: [5019],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'visa',
        patterns: [4],
        format: defaultFormat,
        length: [13, 16, 19],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'mastercard',
        patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'amex',
        patterns: [34, 37],
        format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
        length: [15],
        cvvLength: [3, 4],
        luhn: true,
    }, {
        type: 'dinersclub',
        patterns: [30, 36, 38, 39],
        format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
        length: [14],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'discover',
        patterns: [60, 64, 65, 622],
        format: defaultFormat,
        length: [16],
        cvvLength: [3],
        luhn: true,
    }, {
        type: 'unionpay',
        patterns: [62, 88],
        format: defaultFormat,
        length: [16, 17, 18, 19],
        cvvLength: [3],
        luhn: false,
    }, {
        type: 'jcb',
        patterns: [35],
        format: defaultFormat,
        length: [16, 19],
        cvvLength: [3],
        luhn: true,
    },
];
// @dynamic
var CreditCard = /** @class */ (function () {
    function CreditCard() {
    }
    CreditCard.cards = function () {
        return cards;
    };
    CreditCard.cardFromNumber = function (num) {
        num = (num + '').replace(/\D/g, '');
        for (var i = 0, len = cards.length; i < len; i++) {
            var card = cards[i];
            var ref = card.patterns;
            for (var j = 0, len1 = ref.length; j < len1; j++) {
                var pattern = ref[j];
                var p = pattern + '';
                if (num.substr(0, p.length) === p) {
                    return card;
                }
            }
        }
    };
    CreditCard.restrictNumeric = function (e) {
        if (e.metaKey || e.ctrlKey) {
            return true;
        }
        if (e.which === 32) {
            return false;
        }
        if (e.which === 0) {
            return true;
        }
        if (e.which < 33) {
            return true;
        }
        var input = String.fromCharCode(e.which);
        return !!/[\d\s]/.test(input);
    };
    CreditCard.hasTextSelected = function (target) {
        return target.selectionStart !== null && target.selectionStart !== target.selectionEnd;
    };
    CreditCard.cardType = function (num) {
        if (!num) {
            return num;
        }
        var card = this.cardFromNumber(num);
        if (card !== null && typeof card !== 'undefined') {
            return card.type;
        }
        else {
            return null;
        }
    };
    CreditCard.formatCardNumber = function (num) {
        num = num.replace(/\D/g, '');
        var card = this.cardFromNumber(num);
        if (!card) {
            return num;
        }
        var upperLength = card.length[card.length.length - 1];
        num = num.slice(0, upperLength);
        if (card.format.global) {
            var matches = num.match(card.format);
            if (matches != null) {
                return matches.join(' ');
            }
        }
        else {
            var groups = card.format.exec(num);
            if (groups == null) {
                return;
            }
            groups.shift();
            return groups.filter(Boolean).join(' ');
        }
    };
    CreditCard.safeVal = function (value, target, updateValue) {
        var cursor = null;
        var last = target.value;
        var result = null;
        try {
            cursor = target.selectionStart;
        }
        catch (error) { }
        updateValue(value);
        if (cursor !== null && target === document.activeElement) {
            if (cursor === last.length) {
                cursor = value.length;
            }
            if (last !== value) {
                var prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);
                var currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);
                var digit = value[cursor];
                if (/\d/.test(digit) && prevPair === (digit + " ") && currPair === (" " + digit)) {
                    cursor = cursor + 1;
                }
            }
            result = cursor;
        }
        return result;
    };
    CreditCard.isCardNumber = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit)) {
            return false;
        }
        if (CreditCard.hasTextSelected(target)) {
            return true;
        }
        var value = (target.value + digit).replace(/\D/g, '');
        var card = CreditCard.cardFromNumber(value);
        if (card) {
            return value.length <= card.length[card.length.length - 1];
        }
        else {
            return value.length <= 16;
        }
    };
    CreditCard.restrictExpiry = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
            return false;
        }
        var value = ("" + target.value + digit).replace(/\D/g, '');
        return value.length > 6;
    };
    CreditCard.replaceFullWidthChars = function (str) {
        if (str === null) {
            str = '';
        }
        var fullWidth = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19';
        var halfWidth = '0123456789';
        var value = '';
        var chars = str.split('');
        // tslint:disable-next-line:prefer-for-of
        for (var i = 0; i < chars.length; i++) {
            var chr = chars[i];
            var idx = fullWidth.indexOf(chr);
            if (idx > -1) {
                chr = halfWidth[idx];
            }
            value += chr;
        }
        return value;
    };
    CreditCard.formatExpiry = function (expiry) {
        var parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/);
        if (!parts) {
            return '';
        }
        var mon = parts[1] || '';
        var sep = parts[2] || '';
        var year = parts[3] || '';
        if (year.length > 0) {
            sep = ' / ';
        }
        else if (sep === ' /') {
            mon = mon.substring(0, 1);
            sep = '';
        }
        else if (mon.length === 2 || sep.length > 0) {
            sep = ' / ';
        }
        else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {
            mon = "0" + mon;
            sep = ' / ';
        }
        return "" + mon + sep + year;
    };
    CreditCard.restrictCvc = function (key, target) {
        var digit = String.fromCharCode(key);
        if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
            return false;
        }
        var val = "" + target.value + digit;
        return val.length <= 4;
    };
    CreditCard.luhnCheck = function (num) {
        var digits = num.split('').reverse();
        var odd = true;
        var sum = 0;
        // tslint:disable-next-line:prefer-for-of
        for (var i = 0; i < digits.length; i++) {
            var digit = parseInt(digits[i], 10);
            // tslint:disable-next-line:no-conditional-assignment
            if ((odd = !odd)) {
                digit *= 2;
            }
            if (digit > 9) {
                digit -= 9;
            }
            sum += digit;
        }
        return sum % 10 === 0;
    };
    return CreditCard;
}());

var CreditCardValidators = /** @class */ (function () {
    function CreditCardValidators() {
    }
    CreditCardValidators.validateCCNumber = function (control) {
        if (Validators.required(control) !== undefined && Validators.required(control) !== null) {
            return { ccNumber: true };
        }
        var num = control.value.toString().replace(/\s+|-/g, '');
        if (!/^\d+$/.test(num)) {
            return { ccNumber: true };
        }
        var card = CreditCard.cardFromNumber(num);
        if (!card) {
            return { ccNumber: true };
        }
        if (card.length.includes(num.length) && (card.luhn === false || CreditCard.luhnCheck(num))) {
            return null;
        }
        var upperlength = card.length[card.length.length - 1];
        if (num.length > upperlength) {
            var registeredNum = num.substring(0, upperlength);
            if (CreditCard.luhnCheck(registeredNum)) {
                return null;
            }
        }
        return { ccNumber: true };
    };
    CreditCardValidators.validateExpDate = function (control) {
        if (Validators.required(control) !== undefined && Validators.required(control) !== null) {
            return { expDate: true };
        }
        if (typeof control.value !== 'undefined' && control.value.length >= 5) {
            var _a = __read(control.value.split(/[\s\/]+/, 2), 2), month = _a[0], year = _a[1];
            if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                var prefix = new Date().getFullYear().toString().slice(0, 2);
                year = prefix + year;
            }
            month = parseInt(month, 10).toString();
            year = parseInt(year, 10).toString();
            if (/^\d+$/.test(month) && /^\d+$/.test(year) && (month >= 1 && month <= 12)) {
                var expiry = new Date(year, month);
                var currentTime = new Date();
                expiry.setMonth(expiry.getMonth() - 1);
                expiry.setMonth(expiry.getMonth() + 1, 1);
                if (expiry > currentTime) {
                    return null;
                }
            }
        }
        return { expDate: true };
    };
    return CreditCardValidators;
}());

var CreditCardFormatDirective = /** @class */ (function () {
    function CreditCardFormatDirective(el, control) {
        this.el = el;
        this.control = control;
        this.cards = CreditCard.cards();
        this.resolvedScheme$ = new BehaviorSubject('unknown');
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    CreditCardFormatDirective.prototype.updateValue = function (value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    };
    CreditCardFormatDirective.prototype.onKeypress = function (e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.isCardNumber(e.which, this.target)) {
                this.formatCardNumber(e);
            }
        }
        else {
            e.preventDefault();
        }
    };
    CreditCardFormatDirective.prototype.onKeydown = function (e) {
        this.formatBackCardNumber(e);
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onKeyup = function () {
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.onPaste = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onChange = function () {
        this.reFormatCardNumber();
    };
    CreditCardFormatDirective.prototype.onInput = function () {
        this.reFormatCardNumber();
        this.setCardType();
    };
    CreditCardFormatDirective.prototype.formatCardNumber = function (e) {
        var digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
            return;
        }
        var value = this.target.value;
        var card = CreditCard.cardFromNumber(value + digit);
        var length = (value.replace(/\D/g, '') + digit).length;
        var upperLength = card ? card.length[card.length.length - 1] : 19;
        if (length >= upperLength) {
            return;
        }
    };
    CreditCardFormatDirective.prototype.formatBackCardNumber = function (e) {
        var value = this.target.value;
        var selStart = this.target.selectionStart;
        if (e.which !== 8) {
            return;
        }
        if (selStart != null
            && selStart === this.target.selectionEnd
            && selStart > 0
            && selStart !== value.length
            && value[selStart - 1] === ' ') {
            e.preventDefault();
            if (selStart <= 2) {
                this.updateValue(value.slice(selStart));
                this.target.selectionStart = 0;
                this.target.selectionEnd = 0;
            }
            else {
                this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                this.target.selectionStart = selStart - 2;
                this.target.selectionEnd = selStart - 2;
            }
        }
    };
    CreditCardFormatDirective.prototype.setCardType = function () {
        var _this = this;
        var cardType = CreditCard.cardType(this.target.value) || 'unknown';
        this.resolvedScheme$.next(cardType);
        if (!this.target.classList.contains(cardType)) {
            this.cards.forEach(function (card) {
                _this.target.classList.remove(card.type);
            });
            this.target.classList.remove('unknown');
            this.target.classList.add(cardType);
            this.target.classList.toggle('identified', cardType !== 'unknown');
        }
    };
    CreditCardFormatDirective.prototype.reFormatCardNumber = function () {
        var _this = this;
        var value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
        var oldValue = this.target.value;
        if (value !== oldValue) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (function (safeVal) {
                _this.updateValue(safeVal);
            }));
        }
    };
    CreditCardFormatDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    __decorate([
        HostListener('keypress', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeypress", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], CreditCardFormatDirective.prototype, "onKeydown", null);
    __decorate([
        HostListener('keyup')
    ], CreditCardFormatDirective.prototype, "onKeyup", null);
    __decorate([
        HostListener('paste')
    ], CreditCardFormatDirective.prototype, "onPaste", null);
    __decorate([
        HostListener('change')
    ], CreditCardFormatDirective.prototype, "onChange", null);
    __decorate([
        HostListener('input')
    ], CreditCardFormatDirective.prototype, "onInput", null);
    CreditCardFormatDirective = __decorate([
        Directive({
            selector: '[ccNumber]',
            exportAs: 'ccNumber',
        }),
        __param(1, Self()), __param(1, Optional())
    ], CreditCardFormatDirective);
    return CreditCardFormatDirective;
}());

var CvcFormatDirective = /** @class */ (function () {
    function CvcFormatDirective(el, control) {
        this.el = el;
        this.control = control;
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    CvcFormatDirective.prototype.updateValue = function (value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    };
    CvcFormatDirective.prototype.onKeypress = function (e) {
        if (!CreditCard.restrictNumeric(e) && !CreditCard.restrictCvc(e.which, this.target)) {
            e.preventDefault();
        }
    };
    CvcFormatDirective.prototype.reformatCvc = function () {
        var _this = this;
        var val = CreditCard.replaceFullWidthChars(this.target.value)
            .replace(/\D/g, '')
            .slice(0, 4);
        var oldVal = this.target.value;
        if (val !== oldVal) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (function (safeVal) {
                _this.updateValue(safeVal);
            }));
        }
    };
    CvcFormatDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    __decorate([
        HostListener('keypress', ['$event'])
    ], CvcFormatDirective.prototype, "onKeypress", null);
    __decorate([
        HostListener('paste'),
        HostListener('change'),
        HostListener('input')
    ], CvcFormatDirective.prototype, "reformatCvc", null);
    CvcFormatDirective = __decorate([
        Directive({
            selector: '[ccCVC]',
        }),
        __param(1, Self()), __param(1, Optional())
    ], CvcFormatDirective);
    return CvcFormatDirective;
}());

var ExpiryFormatDirective = /** @class */ (function () {
    function ExpiryFormatDirective(el, control) {
        this.el = el;
        this.control = control;
        this.target = this.el.nativeElement;
    }
    /**
     * Updates the value to target element, or FormControl if exists.
     * @param value New input value.
     */
    ExpiryFormatDirective.prototype.updateValue = function (value) {
        if (this.control) {
            this.control.control.setValue(value);
        }
        else {
            this.target.value = value;
        }
    };
    ExpiryFormatDirective.prototype.onKeypress = function (e) {
        if (CreditCard.restrictNumeric(e)) {
            if (CreditCard.restrictExpiry(e.which, this.target)) {
                this.formatExpiry(e);
                this.formatForwardSlashAndSpace(e);
                this.formatForwardExpiry(e);
            }
        }
        else {
            e.preventDefault();
            return false;
        }
    };
    ExpiryFormatDirective.prototype.onKeydown = function (e) {
        if (CreditCard.restrictNumeric(e) && CreditCard.restrictExpiry(e.which, this.target)) {
            this.formatBackExpiry(e);
        }
    };
    ExpiryFormatDirective.prototype.onChange = function () {
        this.reformatExpiry();
    };
    ExpiryFormatDirective.prototype.onInput = function () {
        this.reformatExpiry();
    };
    ExpiryFormatDirective.prototype.formatExpiry = function (e) {
        var digit = String.fromCharCode(e.which);
        var val = "" + this.target.value + digit;
        if (!/^\d+$/.test(digit)) {
            return;
        }
        if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
            e.preventDefault();
            this.updateValue("0" + val + " / ");
        }
        else if (/^\d\d$/.test(val)) {
            e.preventDefault();
            var m1 = parseInt(val[0], 10);
            var m2 = parseInt(val[1], 10);
            if (m2 > 2 && m1 !== 0) {
                this.updateValue("0" + m1 + " / " + m2);
            }
            else {
                this.updateValue(val + " / ");
            }
        }
    };
    ExpiryFormatDirective.prototype.formatForwardSlashAndSpace = function (e) {
        var which = String.fromCharCode(e.which);
        var val = this.target.value;
        if (!(which === '/' || which === ' ')) {
            return false;
        }
        if (/^\d$/.test(val) && val !== '0') {
            this.updateValue("0" + val + " / ");
        }
    };
    ExpiryFormatDirective.prototype.formatForwardExpiry = function (e) {
        var digit = String.fromCharCode(e.which);
        var val = this.target.value;
        if (!/^\d+$/.test(digit) && /^\d\d$/.test(val)) {
            this.updateValue(this.target.value = val + " / ");
        }
    };
    ExpiryFormatDirective.prototype.formatBackExpiry = function (e) {
        var val = this.target.valueOf;
        if (e.which !== 8) {
            return;
        }
        if ((this.target.selectionStart != null) && this.target.selectionStart !== val.length) {
            return;
        }
        if (/\d\s\/\s$/.test(val)) {
            e.preventDefault();
            this.updateValue(val.replace(/\d\s\/\s$/, ''));
        }
    };
    ExpiryFormatDirective.prototype.reformatExpiry = function () {
        var _this = this;
        var val = CreditCard.formatExpiry(CreditCard.replaceFullWidthChars(this.target.value));
        var oldVal = this.target.value;
        if (val !== oldVal) {
            this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (function (safeVal) {
                _this.updateValue(safeVal);
            }));
        }
    };
    ExpiryFormatDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] }
    ]; };
    __decorate([
        HostListener('keypress', ['$event'])
    ], ExpiryFormatDirective.prototype, "onKeypress", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], ExpiryFormatDirective.prototype, "onKeydown", null);
    __decorate([
        HostListener('change')
    ], ExpiryFormatDirective.prototype, "onChange", null);
    __decorate([
        HostListener('input')
    ], ExpiryFormatDirective.prototype, "onInput", null);
    ExpiryFormatDirective = __decorate([
        Directive({
            selector: '[ccExp]',
        }),
        __param(1, Self()), __param(1, Optional())
    ], ExpiryFormatDirective);
    return ExpiryFormatDirective;
}());

var CREDIT_CARD_LIBRARY_DIRECTIVES = [
    CreditCardFormatDirective,
    ExpiryFormatDirective,
    CvcFormatDirective,
];
var CreditCardDirectivesModule = /** @class */ (function () {
    function CreditCardDirectivesModule() {
    }
    CreditCardDirectivesModule = __decorate([
        NgModule({
            declarations: [CREDIT_CARD_LIBRARY_DIRECTIVES],
            exports: [CREDIT_CARD_LIBRARY_DIRECTIVES],
        })
    ], CreditCardDirectivesModule);
    return CreditCardDirectivesModule;
}());

/*
 * Public API Surface of angular-cc-library
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CreditCard, CreditCardDirectivesModule, CreditCardFormatDirective, CreditCardValidators, CvcFormatDirective, ExpiryFormatDirective };
//# sourceMappingURL=angular-cc-library.js.map
