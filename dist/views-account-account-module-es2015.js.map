{"version":3,"sources":["./src/app/views/account/sign-in/sign-in.component.ts","./src/app/views/account/sign-in/sign-in.component.html","./src/app/views/account/account.module.ts","./src/app/views/account/forget-password/forget-password.component.ts","./src/app/views/account/forget-password/forget-password.component.html","./src/app/views/account/sign-up/sign-up.component.ts","./src/app/views/account/sign-up/sign-up.component.html","./src/app/views/account/account-routing.module.ts"],"names":[],"mappings":"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","file":"views-account-account-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.css'],\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  loginForm: FormGroup; // loginForm form of type formGroup\r\n  signInType: string; // to detect the type of signUp(from normal signUp or signUp from cart)\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private apiService: ApiService,\r\n    private route: Router,\r\n    private authService: AuthService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private toaster: ToastrService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((res) => {\r\n      this.signInType = res[`origin`]; // get the signUp type from queryParams\r\n    });\r\n    this.createLoginForm();\r\n  }\r\n\r\n  // function to create signIn form\r\n  createLoginForm(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: new FormControl('', [\r\n        Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'),\r\n        Validators.required,\r\n      ]),\r\n      password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  // function to get controls of signUp form\r\n  get formControl(): any {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of signUp form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to submit signUp form\r\n  submitSignInForm(form): void {\r\n    if (form.invalid) {\r\n      // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      this.apiService.login(form.value).subscribe(\r\n        (res) => {\r\n          if (res[`code`] === 200) {\r\n            this.authService.loginData(res); // calling authService loginData to store info in localStorage.\r\n            if (this.signInType === 'cart') {\r\n              this.route.navigate(['/cart']); // if queryParams if from cart navigate to cart\r\n            } else if (this.signInType === 'cartAddress') {\r\n              this.route.navigate(['/cart/deliveryAddress']); // if queryParams if from buyNow navigate to cartAddress\r\n            } else {\r\n              this.getCartCount();\r\n              this.route.navigate(['/home']); // if queryParams if empty navigate to home\r\n            }\r\n          }\r\n        },\r\n        (err) => {\r\n          if (err?.error?.code === 400 || err?.status === 400) {\r\n            this.toaster.error('Invalid Credentials');\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  getCartCount(): void {\r\n    this.apiService.totalItemsInCart();\r\n  }\r\n\r\n  // function to signUp\r\n  signUp(): void {\r\n    if (this.signInType === 'cart') {\r\n      this.route.navigate(['/sign-up'], { queryParams: { origin: 'cart' } }); // navigate to signUp with queryParams 'cart'\r\n    } else if (this.signInType === 'cartAddress') {\r\n      this.route.navigate(['/sign-up'], {\r\n        queryParams: { origin: 'cartAddress' },\r\n      }); // navigate to signUp with queryParams 'cartAddress'\r\n    } else {\r\n      this.route.navigate(['/sign-up']); // navigate to signUp\r\n    }\r\n  }\r\n\r\n  // function to navigate back\r\n  goBack(): void {\r\n    if (this.signInType === 'cart') {\r\n      this.route.navigate(['/cart']);\r\n    } else if (this.signInType === 'cartAddress') {\r\n      this.location.back();\r\n    } else {\r\n      this.route.navigate(['/home']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"homepage\" style=\"background: #fff\">\r\n  <div>\r\n    <div class=\"container\"></div>\r\n  </div>\r\n  <div class=\"sign-up2\">\r\n    <div class=\"sign-up-form2 signUpPage2\">\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"submitSignInForm(loginForm)\">\r\n        <div class=\"sign-up-title\">\r\n          <h2>Sign In</h2>\r\n        </div>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Your Email\"\r\n              formControlName=\"email\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Enter Your Password\"\r\n              formControlName=\"password\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.password?.invalid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.required\">\r\n            Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.minlength\">\r\n            Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"remember-section\">\r\n          <span>\r\n            <a href=\"javascript:void(0)\" [routerLink]=\"['/forget-password']\"\r\n              >Forgot Password?</a\r\n            >\r\n          </span>\r\n        </div>\r\n        <button type=\"submit\">Sign in</button>\r\n        <div class=\"already-acc\">\r\n          Don't have an account?\r\n          <a href=\"javascript:void(0)\" (click)=\"signUp()\">Sign Up</a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DirectivesModule } from 'src/app/directives/directives.module';\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\n\r\n@NgModule({\r\n  declarations: [SignInComponent, SignUpComponent, ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AccountRoutingModule,\r\n    DirectivesModule\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.css']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  forgotPasswordForm: FormGroup; // forgotPassword form of type formGroup\r\n\r\n  constructor(private fb: FormBuilder, private apiService: ApiService, private toaster: ToastrService, private route: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createForgotPasswordForm();\r\n  }\r\n\r\n  // function to create forgotPassword form\r\n  createForgotPasswordForm(): void{\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: new FormControl('', [Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'), Validators.required])\r\n    });\r\n  }\r\n\r\n  // function to get controls of forgotPassword form\r\n  get formControl(): any {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of forgotPassword form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to submit forgotPassword form\r\n  submitForgotPasswordForm(form): void{\r\n    if (form.invalid){ // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    }else{\r\n      // calling forgotPassword api\r\n      this.apiService.forgotPassword(form.value).subscribe(res => {\r\n        if (res[`code`] === 200){\r\n          this.route.navigate(['/sign-in']).then(() => {\r\n            this.toaster.success(res[`message`]);\r\n          });\r\n        }else if (res[`code`] === 404) {\r\n          this.toaster.error(res[`message`]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"homepage\" style=\"background: #ECF3F6;\">\r\n  <div class=\"full-banner-home\">\r\n    <!-- <img src=\"assets/images/banner/BannerImage.png\"> -->\r\n    <div id=\"myhomeCarousel\" class=\"carousel slide\" data-ride=\"carousel\">\r\n      <!-- Wrapper for slides -->\r\n      <div class=\"carousel-inner\">\r\n        <div class=\"item active\">\r\n          <img src=\"assets/images/HomeBanner/Banner/1.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/2.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/3.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/4.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/5.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/6.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/7.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Left and right controls -->\r\n      <a class=\"left carousel-control\" href=\"#myhomeCarousel\" data-slide=\"prev\">\r\n        <span><i class=\"fa fa-arrow-left fa-2x\"></i></span>\r\n\r\n        <span class=\"sr-only\">Previous</span>\r\n      </a>\r\n      <a\r\n        class=\"right carousel-control\"\r\n        href=\"#myhomeCarousel\"\r\n        data-slide=\"next\"\r\n      >\r\n        <span><i class=\"fa fa-arrow-right fa-2x\"></i></span>\r\n        <span class=\"sr-only\">Next</span>\r\n      </a>\r\n    </div>\r\n    <div class=\"container\"></div>\r\n  </div>\r\n  <div class=\"sign-up\">\r\n    <div class=\"sign-up-form signUpPage\">\r\n      <form\r\n        [formGroup]=\"forgotPasswordForm\"\r\n        (ngSubmit)=\"submitForgotPasswordForm(forgotPasswordForm)\"\r\n      >\r\n        <div class=\"sign-up-title\">\r\n          <div class=\"sign-back\">\r\n            <a href=\"javascript:void(0)\" [routerLink]=\"['/home']\"\r\n              ><img src=\"assets/images/icons/back.svg\" />Back</a\r\n            >\r\n          </div>\r\n          <h1>Forgot Password</h1>\r\n          <!-- <p>Welcome back</p> -->\r\n        </div>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <label>Your Email</label>\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"abc@xyz.com\"\r\n              formControlName=\"email\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n        <button type=\"submit\">Confirm</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.css'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  signUpForm: FormGroup; // signUpForm form of type formGroup\r\n  signUpType: string; // to detect the type of signUp(from normal signUp or signUp from cart)\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private apiService: ApiService,\r\n    private toaster: ToastrService,\r\n    private route: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private authService: AuthService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((res) => {\r\n      this.signUpType = res.origin; // get the signUp type from queryParams\r\n    });\r\n    this.createSignUpForm();\r\n  }\r\n\r\n  // function to create signUp form\r\n  createSignUpForm(): void {\r\n    this.signUpForm = this.fb.group({\r\n      name: new FormControl('', Validators.required),\r\n      email: new FormControl('', [\r\n        Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'),\r\n        Validators.required,\r\n      ]),\r\n      password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n      confirm_password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n      company_name: new FormControl(null, Validators.minLength(4)),\r\n      user_type: new FormControl('End User'),\r\n    });\r\n  }\r\n\r\n  // function to get controls of signUp form\r\n  get formControl(): any {\r\n    return this.signUpForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of signUp form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to navigate back\r\n  goBack(): void {\r\n    if (this.signUpType === 'cart') {\r\n      this.route.navigate(['/cart']);\r\n    } else if (this.signUpType === 'cartAddress') {\r\n      this.location.back();\r\n    } else {\r\n      this.route.navigate(['/home']);\r\n    }\r\n  }\r\n\r\n  // function to submit signUp form\r\n  submitSignUpForm(form): void {\r\n    if (form.invalid) {\r\n      // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      if (form.value.password === form.value.confirm_password) {\r\n        // condition for checking password and confirmPassword are same or not\r\n        this.apiService.register(form.value).subscribe(\r\n          (res) => {\r\n            if (res[`code`] === 200) {\r\n              this.toaster.success(res[`message`]);\r\n              const signInData = {\r\n                email: form.value.email,\r\n                password: form.value.password,\r\n              };\r\n              this.signIn(signInData); // sign-in function for autoSignIn if registered successfully\r\n            }\r\n          },\r\n          (error) => {\r\n            if (error?.status) {\r\n              this.toaster.error(error?.error?.message);\r\n            }\r\n          }\r\n        );\r\n      } else if (form.value.password !== form.value.confirm_password) {\r\n        this.toaster.error('Password Not Matching!!! Try Again...');\r\n      }\r\n    }\r\n  }\r\n\r\n  // signIn function to call signIn api\r\n  signIn(signInData): void {\r\n    this.apiService.login(signInData).subscribe((res) => {\r\n      if (res[`code`] === 200) {\r\n        this.authService.loginData(res); // calling authService loginData to store info in localStorage.\r\n        if (this.signUpType === 'cart') {\r\n          this.route.navigate(['/cart']); // if queryParams if from cart navigate to cart\r\n        } else if (this.signUpType === 'cartAddress') {\r\n          this.route.navigate(['/cart/deliveryAddress']); // if queryParams if from buyNow navigate to cartAddress\r\n        } else {\r\n          this.route.navigate(['/home']); // if queryParams if empty navigate to home\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"homepage\" style=\"background: #fff\">\r\n  <div class=\"sign-up\">\r\n    <div class=\"sign-up-form signUpPage\">\r\n      <form [formGroup]=\"signUpForm\" (ngSubmit)=\"submitSignUpForm(signUpForm)\">\r\n        <div class=\"sign-up-title\">\r\n          <h2>Create Account</h2>\r\n        </div>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"email\" placeholder=\"Enter Your Email Address Here\" formControlName=\"email\" required />\r\n            <img *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\">\r\n          <div class=\"radio-input\">\r\n            <div>\r\n              <input type=\"radio\" id=\"endUser\" value=\"End User\" formControlName=\"user_type\" />\r\n              <label for=\"endUser\">End User</label>\r\n            </div>\r\n            <div>\r\n              <input type=\"radio\" id=\"dealer\" value=\"Dealer\" formControlName=\"user_type\" />\r\n              <label for=\"dealer\">Dealer/Reseller</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.name?.errors?.required &&\r\n            (formControl?.name?.touched || formControl?.name?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.name?.valid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"text\" placeholder=\"Enter Your Full Name Here\" formControlName=\"name\" appTextOnly required />\r\n            <img *ngIf=\"\r\n                formControl?.name?.valid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.name?.invalid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.name?.invalid &&\r\n            (formControl?.name?.touched || formControl?.name?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.required\">\r\n            Name Is Required\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.company_name?.invalid &&\r\n            (formControl?.company_name?.touched ||\r\n              formControl?.company_name?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.company_name?.valid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"text\" placeholder=\"Enter Company Name\" formControlName=\"company_name\" />\r\n            <img *ngIf=\"\r\n                formControl?.company_name?.valid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.company_name?.invalid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.company_name?.invalid &&\r\n            (formControl?.company_name?.touched ||\r\n              formControl?.company_name?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.company_name?.errors.minlength\">\r\n            Company Name Must Be of min 4 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"password\" placeholder=\"Enter Your Password\" formControlName=\"password\" required />\r\n            <img *ngIf=\"\r\n                formControl?.password.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.password.invalid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.required\">\r\n            Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.minlength\">\r\n            Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.confirm_password?.invalid &&\r\n            (formControl?.confirm_password?.touched ||\r\n              formControl?.confirm_password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.confirm_password?.valid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"password\" placeholder=\"Enter Confirm Password\" formControlName=\"confirm_password\" required />\r\n            <img *ngIf=\"\r\n                formControl?.confirm_password?.valid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.confirm_password?.invalid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.confirm_password?.invalid &&\r\n            (formControl?.confirm_password?.touched ||\r\n              formControl?.confirm_password?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.confirm_password?.errors.required\">\r\n            Confirm Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.confirm_password?.errors.minlength\">\r\n            Confirm Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <button type=\"submit\">Sign Up</button>\r\n        <div class=\"already-acc\">\r\n          Already have an account?\r\n          <a href=\"javascript:void(0)\" [routerLink]=\"['/sign-in']\">Sign In</a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\n\r\nconst routes: Routes = [\r\n  {path: 'sign-in', component: SignInComponent},\r\n  {path: 'sign-up', component: SignUpComponent},\r\n  {path: 'forget-password', component: ForgetPasswordComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}