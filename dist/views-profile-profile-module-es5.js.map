{"version":3,"sources":["webpack:///src/app/views/profile/my-address/my-address.component.ts","webpack:///src/app/views/profile/my-address/my-address.component.html","webpack:///src/app/views/profile/profile.module.ts","webpack:///src/app/views/profile/main-section/main-section.component.ts","webpack:///src/app/views/profile/main-section/main-section.component.html","webpack:///src/app/views/profile/my-profile/my-profile.component.ts","webpack:///src/app/views/profile/my-profile/my-profile.component.html","webpack:///src/app/views/profile/my-orders/my-orders.component.ts","webpack:///src/app/views/profile/my-orders/my-orders.component.html","webpack:///src/app/views/profile/profile-routing.module.ts"],"names":["MyAddressComponent","apiService","toaster","fb","subscribe","addressList","cityInfo","stateInfo","countryInfo","addNewAddress","sessionStorage","getItem","getAddressList","window","atob","getCountries","createAddressForm","addressForm","group","title","required","first_name","middle_name","last_name","phone","pattern","house_no","city","state","pincode","country","push","getCountryData","res","onChangeCountry","userId","userData","user_id","getAllAddress","err","error","message","validNumber","type","maxLength","length","patchValue","substring","countryValue","countryIndex","findIndex","name","states","controls","value","setValue","onlySelf","stateValue","stateIndex","cities","modalType","addressId","show","document","getElementById","classList","add","style","display","modalText","forEach","eachAddress","id","patchAddressForm","showModal","reset","remove","addressData","deleteAddress","success","closeModal","formGroup","Object","keys","formControl","field","control","get","markAsTouched","validateAllFields","form","invalid","countryName","addressUpdateData","addAddress","dirty","updateAddress","sub","unsubscribe","openModal","onInputChange","onChangeState","selector","templateUrl","styleUrls","ProfileModule","declarations","imports","MainSectionComponent","route","authService","routePath","subscription","events","url","split","urlLength","navigate","logOut","logout","MyProfileComponent","createPersonalDataForm","createPasswordUpdateForm","getUserDetails","patchPersonalDataForm","personalDataForm","email","passwordUpdateForm","oldPassword","minLength","password","confirmPassword","updatePersonalDetails","setItem","btoa","getCurrentUser","updatePassword","formType","formControls","submitPersonalDataForm","submitPasswordUpdateForm","MyOrdersComponent","router","orderHistoryData","Array","getOrderHistory","orderHistory","sort","a","b","Date","parse","updated_at","orderId","queryParams","routes","path","component","children","redirectTo","ProfileRoutingModule","forChild","exports"],"mappings":"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","file":"views-profile-profile-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Subscription } from 'rxjs';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-my-address',\r\n  templateUrl: './my-address.component.html',\r\n  styleUrls: ['./my-address.component.css']\r\n})\r\nexport class MyAddressComponent implements OnInit, OnDestroy {\r\n\r\n  subscribe: Subscription[] = []; // subscribe used to store subscription\r\n  addressList = []; // used to assign address list of user\r\n  addressForm: FormGroup; // address form of type formGroup\r\n  cityInfo: any[] = ['']; // used to store city data\r\n  stateInfo: any[] = []; // used to store state data\r\n  countryInfo: any[] = []; // used to store country data\r\n  addressId: string; // used to store addressId\r\n  addNewAddress: boolean = false; // use to check to addNew address or not\r\n  modalText: string;\r\n  constructor(private apiService: ApiService, private toaster: ToastrService, private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('id')) {\r\n      this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n    }\r\n    this.getCountries();\r\n    this.createAddressForm();\r\n  }\r\n\r\n  // function to create addressForm\r\n  createAddressForm(): void {\r\n    this.addressForm = this.fb.group({\r\n      title: new FormControl('', Validators.required),\r\n      first_name: new FormControl('', Validators.required),\r\n      middle_name: new FormControl(''),\r\n      last_name: new FormControl('', Validators.required),\r\n      phone: new FormControl('', [Validators.pattern('[0-9 ]{10,12}'), Validators.required]),\r\n      house_no: new FormControl('', Validators.required),\r\n      city: new FormControl('', Validators.required),\r\n      state: new FormControl('', Validators.required),\r\n      pincode: new FormControl('', [Validators.pattern('[0-9 ]{4}'), Validators.required]),\r\n      country: new FormControl('Australia')\r\n    });\r\n  }\r\n\r\n  // function to getCountries from getCountryData function\r\n  getCountries(): void {\r\n    this.subscribe.push(this.apiService.getCountryData().subscribe(res => {\r\n      if (res) {\r\n        this.countryInfo = res[`countries`]; // assigning response to countryInfo array\r\n        this.onChangeCountry('Australia');\r\n      }\r\n    }));\r\n  }\r\n\r\n  // function to getAddressList by passing userId to getAllAddress function\r\n  getAddressList(userId): void {\r\n    const userData = {\r\n      user_id: +userId\r\n    };\r\n    this.subscribe.push(this.apiService.getAllAddress(userData).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.addressList = res[`address`]; // assigning response to addressList array\r\n      }\r\n    }, err => {\r\n      this.toaster.error(err?.error?.message || err?.message);\r\n    }));\r\n  }\r\n\r\n  // function to get controls of address form\r\n  get formControl(): any {\r\n    return this.addressForm.controls;\r\n  }\r\n\r\n  onInputChange(validNumber, type): void{\r\n    let maxLength = 0;\r\n    if (type === 'phone'){\r\n      maxLength = 12;\r\n      if (validNumber.length >= maxLength){\r\n        this.addressForm.patchValue({\r\n          phone: validNumber.substring(0, 12)\r\n        });\r\n      }\r\n    }else if (type === 'zip'){\r\n      maxLength = 4;\r\n      if (validNumber.length >= maxLength){\r\n        this.addressForm.patchValue({\r\n          pincode: validNumber.substring(0, 4)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // function to get countryName and statesList according to countryValue\r\n  onChangeCountry(countryValue): void {\r\n    this.cityInfo = [];\r\n    const countryIndex = this.countryInfo.findIndex(res => res.name === countryValue);\r\n    this.stateInfo = this.countryInfo[countryIndex].states;\r\n    if (this.addressForm.controls[`state`].value !== null){\r\n      this.addressForm.controls[`state`].setValue(null, {onlySelf: true});\r\n      this.addressForm.controls[`city`].setValue(null, {onlySelf: true});\r\n    }\r\n  }\r\n\r\n  onChangeState(stateValue): void {\r\n     const stateIndex = this.stateInfo.findIndex(res => res.name === stateValue);\r\n     this.cityInfo = this.stateInfo[stateIndex].cities;\r\n  }\r\n\r\n  // function to open popUp Modal according to modalType\r\n  openModal(modalType: string, addressId: string): void {\r\n    if (modalType === 'delete') {\r\n      const show = document.getElementById('deleteModal') as HTMLElement;\r\n      show.classList.add('in');\r\n      show.style.display = 'block';\r\n      this.addressId = addressId;\r\n    }\r\n    else if (modalType === 'update') {\r\n      this.addressId = addressId;\r\n      this.modalText = 'Edit address';\r\n      this.addressList.forEach(eachAddress => {\r\n        if (eachAddress.id === this.addressId) {\r\n          this.patchAddressForm(eachAddress);\r\n        }\r\n      });\r\n      this.showModal();\r\n    }\r\n    else if (modalType === 'add'){\r\n      this.addNewAddress = true;\r\n      this.modalText = 'Add address';\r\n      this.getCountries();\r\n      this.addressForm.reset();\r\n      this.showModal();\r\n    }\r\n  }\r\n\r\n  // function to open modal\r\n  showModal(): void{\r\n    const show = document.getElementById('changeModal') as HTMLElement;\r\n    show.classList.add('in');\r\n    show.style.display = 'block';\r\n  }\r\n\r\n  // function to close modal\r\n  closeModal(modalType?: string): void {\r\n    if (modalType === 'delete') {\r\n      const show = document.getElementById('deleteModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n    }\r\n    else if (modalType === 'update') {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n      this.addNewAddress = false;\r\n    }\r\n    else if (modalType === 'add') {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n      this.addNewAddress = false;\r\n    }else {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  // assign values from addressList to form fields\r\n  patchAddressForm(addressData): void {\r\n    // findIndex() method returns the index of the first element in the array that satisfies the condition\r\n    const countryIndex = this.countryInfo.findIndex(res => res.name === addressData?.country);\r\n\r\n    this.stateInfo = this.countryInfo[countryIndex].states;\r\n    // findIndex() method returns the index of the first element in the array that satisfies the condition\r\n    const stateIndex = this.stateInfo.findIndex(res => res.name === addressData?.state);\r\n    this.cityInfo = this.stateInfo[stateIndex].cities;\r\n\r\n    this.addressForm.patchValue({\r\n      title: addressData?.title,\r\n      first_name: addressData?.first_name,\r\n      middle_name: addressData?.middle_name,\r\n      last_name: addressData?.last_name,\r\n      phone: addressData?.phone,\r\n      house_no: addressData?.house_no,\r\n      city: addressData?.city,\r\n      state: addressData?.state,\r\n      pincode: addressData?.pincode,\r\n      country: addressData?.country\r\n    });\r\n  }\r\n\r\n  // function to delete address by passing addressId in deleteAddress api\r\n  deleteAddress(): void {\r\n    this.subscribe.push(this.apiService.deleteAddress(this.addressId).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.toaster.success(res[`message`]);\r\n        // this.getAddressList(window.atob(localStorage.getItem('id')));\r\n        this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n        this.closeModal('delete');\r\n      }\r\n    }));\r\n  }\r\n\r\n  // function to validate all fields according to formType\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // function to update and add new address\r\n  updateAddress(form): void {\r\n    if (form.invalid) {\r\n      this.validateAllFields(form);  // if form in invalid then call validateAllfields function\r\n    } else {\r\n      let countryName;\r\n      if (form?.value?.country === null) {\r\n        this.addressForm.controls[`country`].setValue('Australia', {onlySelf: true});\r\n        countryName = 'Australia';\r\n      }else {\r\n        countryName = form.value.country;\r\n      }\r\n\r\n      const addressUpdateData = {\r\n        user_id: window.atob(sessionStorage.getItem('id')),\r\n        title: form.value.title,\r\n        first_name: form.value.first_name,\r\n        middle_name: form.value.middle_name,\r\n        last_name: form.value.last_name,\r\n        phone: form.value.phone,\r\n        pincode: form.value.pincode,\r\n        city: form.value.city,\r\n        house_no: form.value.house_no,\r\n        state: form.value.state,\r\n        country: countryName\r\n      };\r\n      if (this.addNewAddress){ // checking address type is new or not\r\n        this.apiService.addAddress(addressUpdateData).subscribe(res => {\r\n          if (res[`code`] === 200) {\r\n            this.toaster.success(res[`message`]);\r\n            this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n            this.closeModal('update');\r\n            this.addNewAddress = false;\r\n          }\r\n        });\r\n      }else{\r\n        addressUpdateData[`id`] = this.addressId;\r\n        if (this.addressForm.dirty){\r\n          this.apiService.updateAddress(addressUpdateData).subscribe(res => {\r\n            if (res[`code`] === 200) {\r\n              this.toaster.success(res[`message`]);\r\n              this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n              this.closeModal('update');\r\n            }\r\n          });\r\n        }else {\r\n          this.toaster.error('Nothing changed to update');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // to unsubscribe the subscriptions\r\n  ngOnDestroy(): void {\r\n    // Called once, before the instance is destroyed.\r\n    // Add 'implements OnDestroy' to the class.\r\n    this.subscribe.forEach(sub => {\r\n      if (sub) {\r\n        sub.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","  <ul class=\"nav nav-tabs\">\r\n    <li class=\"active\"><a data-toggle=\"tab\" href=\"#personal\">Address Details</a></li>\r\n  </ul>\r\n\r\n  <div class=\"tab-content\">\r\n\r\n    <div id=\"order\" class=\"tab-pane fade in active\">\r\n\r\n      <p>Manage all the shipping addresses you want (work place, home address ...) This way you won't have to enter the\r\n        shipping address manually with each order.</p>\r\n\r\n      <button class=\"blue-button\" (click)=\"openModal('add', '')\" style=\"margin-bottom: 2px;\">Add Address</button>\r\n\r\n\r\n      <div class=\"order-row address-detail\" *ngFor=\"let eachAddress of addressList; let addressCount = index\">\r\n        <div class=\"order-left\">\r\n          <div class=\"order-desc\">\r\n            <h2>{{eachAddress?.name}}</h2>\r\n            <p>\r\n              {{eachAddress?.house_no}}\r\n              {{eachAddress?.city}} {{eachAddress?.state}},\r\n              {{eachAddress?.country}} {{eachAddress?.pincode}}\r\n              {{eachAddress?.phone}}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"order-status\">\r\n          <button class=\"blue-button\" style=\"margin-right: 4px;\"\r\n            (click)=\"openModal('update', eachAddress?.id)\">Change</button>\r\n          <button [ngStyle]=\"{'visibility': addressCount === 0? 'hidden': 'visible'}\" class=\"white-button\" (click)=\"openModal('delete', eachAddress?.id)\">Delete</button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div id=\"changeModal\" class=\"modal fade\" role=\"dialog\">\r\n    <div class=\"modal-dialog\">\r\n\r\n      <!-- Modal content-->\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">{{modalText}}</h5>\r\n          <button type=\"button\" class=\"close\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"address-row\">\r\n\r\n            <h3>Contact Detail</h3>\r\n\r\n            <form [formGroup]=\"addressForm\">\r\n              <div class=\"address-feild\">\r\n                <label>Title <span>*</span></label>\r\n                <select formControlName=\"title\"\r\n                  [ngClass]=\"(formControl?.title?.invalid && (formControl?.title?.touched || formControl?.title?.dirty))? 'red' : (formControl?.title?.valid && (formControl?.title?.touched || formControl?.title?.dirty)) ? 'green' : ''\"\r\n                  required>\r\n                  <option [ngValue]=\"null\" disabled=\"disabled\">Select title</option>\r\n                  <option value=\"Mr\">Mr.</option>\r\n                  <option value=\"Ms\">Ms.</option>\r\n                  <option value=\" \"></option>\r\n                </select>\r\n                <p class=\"error-addressMsg\"\r\n                  *ngIf=\"formControl?.title?.invalid && (formControl?.title?.touched || formControl?.title?.dirty)\">\r\n                  Select title</p>\r\n              </div>\r\n\r\n              <div class=\"name-container\">\r\n                <div class=\"address-feild address2\">\r\n                  <label>First Name<span>*</span></label>\r\n                  <input type=\"text\" placeholder=\"First Name\" formControlName=\"first_name\"\r\n                    [ngClass]=\"(formControl?.first_name?.errors?.required && (formControl?.first_name?.touched || formControl?.first_name?.dirty))? 'red' : (formControl?.first_name?.valid && (formControl?.first_name?.touched || formControl?.first_name?.dirty)) ? 'green' : ''\"\r\n                    required>\r\n                  <ng-container\r\n                    *ngIf=\"formControl?.first_name?.invalid && (formControl?.first_name?.touched || formControl?.first_name?.dirty)\">\r\n                    <p class=\"error-addressMsg\" *ngIf=\"formControl?.first_name?.errors.required\">First name is required</p>\r\n                  </ng-container>\r\n                </div>\r\n                <div class=\"address-feild address2\">\r\n                  <label>Middle Name</label>\r\n                  <input type=\"text\" placeholder=\"Middle Name\" formControlName=\"middle_name\">\r\n                </div>\r\n\r\n                <div class=\"address-feild address2\">\r\n                  <label>Last Name <span>*</span></label>\r\n                  <input type=\"text\" placeholder=\"Last Name\" formControlName=\"last_name\"\r\n                    [ngClass]=\"(formControl?.last_name?.errors?.required && (formControl?.last_name?.touched || formControl?.last_name?.dirty))? 'red' : (formControl?.last_name?.valid && (formControl?.last_name?.touched || formControl?.last_name?.dirty)) ? 'green' : ''\"\r\n                    required>\r\n                  <ng-container\r\n                    *ngIf=\"formControl?.last_name?.invalid && (formControl?.last_name?.touched || formControl?.last_name?.dirty)\">\r\n                    <p class=\"error-addressMsg\" *ngIf=\"formControl?.last_name?.errors.required\">Last name is required\r\n                    </p>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Contact Number <span>*</span></label>\r\n                <input type=\"text\" placeholder=\"Contact Number\" appNumOnly (input)=\"onInputChange($event.target.value, 'phone')\" formControlName=\"phone\"\r\n                [ngClass]=\"((formControl?.phone?.errors?.required || formControl?.phone?.errors?.pattern) && (formControl?.phone?.touched || formControl?.phone?.dirty))? 'red' : (formControl?.phone?.valid && (formControl?.phone?.touched || formControl?.phone?.dirty)) ? 'green' : ''\" required>\r\n                <ng-container *ngIf=\"formControl?.phone?.invalid && (formControl?.phone?.touched || formControl?.phone?.dirty)\">\r\n                  <p class=\"validation-error\" *ngIf=\"formControl?.phone?.errors.required\">Phone number is required</p>\r\n                  <p class=\"validation-error\" *ngIf=\"formControl?.phone?.errors.pattern\">Enter valid phone number</p>\r\n                </ng-container>\r\n              </div>\r\n              <h3>Address</h3>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Address(House No., Building , street)<span>*</span></label>\r\n                <input type=\"text\" placeholder=\"Address\" formControlName=\"house_no\"\r\n                [ngClass]=\"(formControl?.house_no?.invalid && (formControl?.house_no?.touched || formControl?.house_no?.dirty))? 'red' : (formControl?.house_no?.valid && (formControl?.house_no?.touched || formControl?.house_no?.dirty)) ? 'green' : ''\" required>\r\n                <p class=\"validation-error\" *ngIf=\"formControl?.house_no?.invalid && (formControl?.house_no?.touched || formControl?.house_no?.dirty)\">Address Is Required</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Country <span>*</span></label>\r\n                <select formControlName=\"country\" (change)=\"onChangeCountry($event.target.value)\"\r\n                [ngClass]=\"(formControl?.country?.invalid && (formControl?.country?.touched || formControl?.country?.dirty))? 'red' : (formControl?.country?.valid && (formControl?.country?.touched || formControl?.country?.dirty)) ? 'green' : ''\">\r\n                  <option *ngFor=\"let eachCountry of countryInfo; let countryCount = index\" value=\"{{eachCountry?.name}}\">{{eachCountry.name}}</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>State <span>*</span></label>\r\n                <select formControlName=\"state\" (change)=\"onChangeState($event.target.value)\"\r\n                [ngClass]=\"(formControl?.state?.invalid && (formControl?.state?.touched || formControl?.state?.dirty))? 'red' : (formControl?.state?.valid && (formControl?.state?.touched || formControl?.state?.dirty)) ? 'green' : ''\" required>\r\n                <option [ngValue]=\"null\" disabled=\"disabled\">Please select state</option>\r\n                <option *ngFor=\"let eachState of stateInfo; let stateCount = index\" value=\"{{eachState?.name}}\">{{eachState.name}}</option>\r\n                </select>\r\n                <p class=\"validation-error\" *ngIf=\"formControl?.state?.invalid && (formControl?.state?.touched || formControl?.state?.dirty)\">Select state from list</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\" >\r\n                <label>City <span>*</span></label>\r\n                <select formControlName=\"city\"\r\n                [ngClass]=\"(formControl?.city?.invalid && (formControl?.city?.touched || formControl?.city?.dirty))? 'red' : (formControl?.state?.valid && (formControl?.city?.touched || formControl?.city?.dirty)) ? 'green' : ''\" required>\r\n                <option [ngValue]=\"null\" disabled=\"disabled\">Please select city</option>\r\n                <option *ngFor=\"let eachCity of cityInfo; let cityCount = index\" value=\"{{eachCity?.name}}\">{{eachCity.name}}</option>\r\n                </select>\r\n                <p class=\"error-addressMsg\" *ngIf=\"formControl?.city?.invalid && (formControl?.city?.touched || formControl?.city?.dirty)\">Select city from list</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Postal code<span>*</span></label>\r\n                <input type=\"text\" placeholder=\"1234\" appNumOnly (input)=\"onInputChange($event.target.value, 'zip')\" formControlName=\"pincode\"\r\n                [ngClass]=\"((formControl?.pincode?.errors?.required || formControl?.pincode?.errors?.pattern) && (formControl?.pincode?.touched || formControl?.pincode?.dirty))? 'red' : (formControl?.pincode?.valid && (formControl?.pincode?.touched || formControl?.pincode?.dirty)) ? 'green' : ''\" required>\r\n                <ng-container *ngIf=\"formControl?.pincode?.invalid && (formControl?.pincode?.touched || formControl?.pincode?.dirty)\">\r\n                  <div class=\"validation-error\" *ngIf=\"formControl?.pincode?.errors.required\">Postal code is required</div>\r\n                  <div class=\"validation-error\" *ngIf=\"formControl?.pincode?.errors.pattern\">Enter valid postal code</div>\r\n                </ng-container>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\" blue-button\" (click)=\"updateAddress(addressForm)\">Save</button>\r\n          <button type=\"button\" class=\" blue-button\" (click)=\"closeModal('update')\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div id=\"deleteModal\" class=\"modal fade\" role=\"dialog\">\r\n    <div class=\"modal-dialog\">\r\n\r\n      <!-- Modal content-->\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-body\">\r\n          <div class=\"delete-txt\">\r\n            <div class=\"remove-sec\">Are you sure to delete this ?<p></p>\r\n            </div>\r\n\r\n            <button class=\"blue-button\" (click)=\"deleteAddress()\">Yes</button>\r\n            <button class=\"blue-button\" (click)=\"closeModal('delete')\">Cancel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MainSectionComponent } from './main-section/main-section.component';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\nimport { MyAddressComponent } from './my-address/my-address.component';\r\nimport { MyOrdersComponent } from './my-orders/my-orders.component';\r\nimport { DirectivesModule } from 'src/app/directives/directives.module';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [MainSectionComponent, MyProfileComponent, MyAddressComponent, MyOrdersComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    DirectivesModule,\r\n    ProfileRoutingModule,\r\n    DirectivesModule\r\n  ]\r\n})\r\nexport class ProfileModule { }\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-main-section',\r\n  templateUrl: './main-section.component.html',\r\n  styleUrls: ['./main-section.component.css']\r\n})\r\nexport class MainSectionComponent implements OnInit, OnDestroy {\r\n\r\n  routePath = 'My Profile'; // default routPath\r\n  urlLength: number; // assign urlLength\r\n  subscription: Subscription; // subscribe used to store subscription\r\n\r\n  constructor(private route: Router, private toaster: ToastrService, private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    // if (localStorage.getItem('id')){ // checking userId\r\n    if (sessionStorage.getItem('id')){ // checking userId\r\n      this.subscription = this.route.events.subscribe(res => {\r\n        if (res instanceof NavigationEnd){\r\n          // split() method is used to split a string into an array of substrings and return a new array\r\n          const url = res.url.split('/');\r\n          this.urlLength = url.length;\r\n          if (url[2] === 'my-profile'){\r\n            this.routePath = 'My Profile';\r\n          }else if (url[2] === 'my-address'){\r\n            this.routePath = 'My Address';\r\n          }else if (url[2] === 'my-orders'){\r\n            this.routePath = 'My Orders';\r\n          }\r\n        }\r\n      });\r\n    }else{\r\n      this.toaster.success('Please sign-in to continue');\r\n      this.route.navigate(['/sign-in']);\r\n    }\r\n  }\r\n\r\n  // function to open modal\r\n  openModal(): void {\r\n    const show = document.getElementById('logoutModal') as HTMLElement;\r\n    show.classList.add('in');\r\n    show.style.display = 'block';\r\n  }\r\n\r\n  // function to close modal\r\n  closeModal(): void {\r\n    const show = document.getElementById('logoutModal') as HTMLElement;\r\n    show.classList.remove('in');\r\n    show.style.display = 'none';\r\n  }\r\n\r\n  // function to logOut\r\n  logout(): void{\r\n    this.authService.logOut();\r\n  }\r\n\r\n  // to unsubscribe the subscriptions\r\n  ngOnDestroy(): void{\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"main-container profile-container addresspage\">\r\n\r\n  <div class=\"breadcrum\">\r\n    <div class=\"container\">\r\n      <p *ngIf=\"urlLength === 3 || routePath == 'My Profile'\"><a href=\"javascript:void(0)\"\r\n          [routerLink]=\"['/home']\">Home</a> <span>/</span> {{ routePath}} </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"profile-section\">\r\n    <div class=\"container\">\r\n      <div class=\"account-section\">\r\n        <div class=\"account-sidebar\">\r\n          <h3>My Account</h3>\r\n          <span>Personal Details</span>\r\n          <ul>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-profile']\">My Profile</a>\r\n            </li>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-address']\">Address</a></li>\r\n          </ul>\r\n          <span>Order Details</span>\r\n          <ul>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-orders']\">Order History</a>\r\n            </li>\r\n            <li><a href=\"javascript:void(0)\" (click)=\"openModal()\">Logout</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"account-tab\">\r\n          <router-outlet></router-outlet>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<div id=\"logoutModal\" class=\"modal fade\" role=\"dialog\">\r\n  <div class=\"modal-dialog\">\r\n\r\n    <!-- Modal content-->\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <div class=\"delete-txt\">\r\n          <div class=\"remove-sec\">Are you sure to log out ?<p></p>\r\n          </div>\r\n\r\n          <button class=\"blue-button\" (click)=\"logout()\">Log Out</button>\r\n          <button class=\"blue-button\" (click)=\"closeModal()\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-my-profile',\r\n  templateUrl: './my-profile.component.html',\r\n  styleUrls: ['./my-profile.component.css']\r\n})\r\nexport class MyProfileComponent implements OnInit {\r\n\r\n  personalDataForm: FormGroup; // personalData form of type formGroup\r\n  passwordUpdateForm: FormGroup; // passwordUpdate form of type formGroup\r\n  userId: number; // used to store userId\r\n  userData: any; // used to store userData\r\n\r\n  constructor(private fb: FormBuilder, private toaster: ToastrService, private apiService: ApiService,\r\n              private authService: AuthService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createPersonalDataForm();\r\n    this.createPasswordUpdateForm();\r\n    if (sessionStorage.getItem('id')) {\r\n      this.userId = +window.atob(sessionStorage.getItem('id'));\r\n      this.getUserDetails(this.userId);\r\n    }\r\n  }\r\n\r\n  // function to getUSerDetails by calling userDetails api\r\n  getUserDetails(userId): void {\r\n    this.apiService.getUserDetails(userId).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.userData = res[`details`];\r\n        this.patchPersonalDataForm();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // function to create personalDataForm\r\n  createPersonalDataForm(): void {\r\n    this.personalDataForm = this.fb.group({\r\n      name: new FormControl('', [Validators.required, Validators.maxLength(15)]),\r\n      email: new FormControl('', [Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'), Validators.required]),\r\n    });\r\n  }\r\n\r\n  // function to create passwordForm\r\n  createPasswordUpdateForm(): void {\r\n    this.passwordUpdateForm = this.fb.group({\r\n      oldPassword: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      confirmPassword: new FormControl('', [Validators.required, Validators.minLength(6)])\r\n    });\r\n  }\r\n\r\n  // function to get controls of personalData form\r\n  get formControl(): any {\r\n    return this.personalDataForm.controls;\r\n  }\r\n\r\n   // function to get controls of passwordUpdate form\r\n  get formControls(): any {\r\n    return this.passwordUpdateForm.controls;\r\n  }\r\n\r\n  // function to set Personal data\r\n  patchPersonalDataForm(): void {\r\n    this.personalDataForm.patchValue({\r\n      name: this.userData.name,\r\n      email: this.userData.email\r\n    });\r\n  }\r\n\r\n  // function to submit personalData form\r\n  submitPersonalDataForm(form): void {\r\n    if (form.invalid) { // condition checking if form is valid or not\r\n      this.validateAllFields(form, 'profileForm'); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      form.value.id = this.userId;\r\n      this.apiService.updatePersonalDetails(form.value).subscribe(res => {\r\n        if (res[`code`] === 200){\r\n          sessionStorage.setItem('currentUser', window.btoa(res[`user`][0].name)); /* setting username from updateApi to override\r\n                                                                        previous userName in sessionStorage */\r\n          this.authService.getCurrentUser(); // calling authService getCurrentUser function\r\n          this.toaster.success(res[`message`]);\r\n        }\r\n      }, err => {\r\n        this.toaster.error(err?.error?.message || err?.message);\r\n      });\r\n    }\r\n  }\r\n\r\n  // function to submit passwordData form\r\n  submitPasswordUpdateForm(form): void {\r\n    if (form.invalid) { // condition checking if form is valid or not\r\n      this.validateAllFields(form, 'passwordForm'); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      if (form.value.password === form.value.confirmPassword) { // comparing the password and confirmPassword Values\r\n        form.value.user_id = this.userId;\r\n        this.apiService.updatePassword(form.value).subscribe(res => {\r\n          if (res[`code`] === 200) {\r\n            this.toaster.success(res[`message`]);\r\n            form.reset(); // function to reset form\r\n          }\r\n        }, err => {\r\n          this.toaster.error('Current Password is incorrect');\r\n        });\r\n      } else {\r\n        this.toaster.error('Password Didn\\'t Match...Please Try Again!!!');\r\n      }\r\n    }\r\n  }\r\n\r\n  // function to validate all fields according to formType\r\n  validateAllFields(formGroup: FormGroup, formType: string): void {\r\n    if (formType === 'passwordForm') {\r\n      Object.keys(this.formControls).forEach(field => {\r\n        const control = formGroup.get(field);\r\n        if (control instanceof FormControl) {\r\n          control.markAsTouched({ onlySelf: true });\r\n        } else if (control instanceof FormGroup) {\r\n          this.validateAllFields(control, formType);\r\n        }\r\n      });\r\n    }else if (formType === 'profileForm'){\r\n      Object.keys(this.formControl).forEach(field => {\r\n        const control = formGroup.get(field);\r\n        if (control instanceof FormControl){\r\n          control.markAsTouched({onlySelf: true});\r\n        }else if (control instanceof FormGroup){\r\n          this.validateAllFields(control, formType);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<ul class=\"nav nav-tabs\">\r\n  <li class=\"active\">\r\n    <a data-toggle=\"tab\" href=\"#personal\">Personal Data</a>\r\n  </li>\r\n  <li>\r\n    <a data-toggle=\"tab\" href=\"#password\">Password Change</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n\r\n  <div id=\"personal\" class=\"tab-pane fade in active\">\r\n\r\n    <p>Feel free to edit any of your details below so your account is always up to date</p>\r\n    <div class=\"sign-up-form\">\r\n      <form [formGroup]=\"personalDataForm\" (ngSubmit)=\"submitPersonalDataForm(personalDataForm)\">\r\n        <div class=\"sign-field\">\r\n          <label>Name <span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"(formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty))? 'error' : (formControl?.name?.valid && (formControl?.name?.touched || formControl?.name?.dirty)) ? 'success' : ''\">\r\n            <input type=\"text\" appTextOnly placeholder=\"Enter your Name\" formControlName=\"name\" appTextOnly required>\r\n            <img *ngIf=\"formControl?.name?.valid && (formControl?.name?.touched || formControl?.name?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img *ngIf=\"formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.required\">Name Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.maxlength\">Name must not exceed 15 characters</p>\r\n          </ng-container>\r\n        </div>\r\n\r\n\r\n        <div class=\"sign-field\">\r\n          <label>Email <span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"((formControl?.email?.errors?.pattern || formControl?.email?.errors?.required) && (formControl?.email?.touched || formControls?.email?.dirty))? 'error' : (formControl?.email?.valid && (formControl?.email?.touched || formControl?.email?.dirty)) ? 'success' : ''\">\r\n            <input type=\"text\" placeholder=\"abc@xyz.com\" formControlName=\"email\" required>\r\n            <img *ngIf=\"formControl?.email?.valid && (formControl?.email?.touched || formControl?.email?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img *ngIf=\"formControl?.email?.invalid && (formControl?.email?.touched || formControl?.email?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControl?.email?.invalid && (formControl?.email?.touched || formControl?.email?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">Email Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">Enter valid email(abc@abc.abc)</p>\r\n          </ng-container>\r\n        </div>\r\n        <button class=\"blue-button\" type=\"submit\" [disabled]=\"personalDataForm.invalid\">Update personal Data</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"password\" class=\"tab-pane fade\">\r\n    <p>If you want to change the password to access your account, enter the folowing information:Your current\r\n      email address is {{userData?.email}}</p>\r\n    <div class=\"sign-up-form\">\r\n      <form [formGroup]=\"passwordUpdateForm\" (ngSubmit)=\"submitPasswordUpdateForm(passwordUpdateForm)\">\r\n        <div class=\"sign-field\">\r\n          <label>Current Password<span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"(formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty))? 'error' : (formControls?.oldPassword?.valid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)) ? 'success' : ''\" >\r\n            <input type=\"password\" placeholder=\"Enter Current Password\" formControlName=\"oldPassword\" required>\r\n            <img\r\n              *ngIf=\"formControls?.oldPassword?.valid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img\r\n              *ngIf=\"formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControls?.oldPassword?.errors.required\">Password Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControls?.oldPassword?.errors.minlength\">Password Must Be of min 6 characters</p>\r\n          </ng-container>\r\n        </div>\r\n\r\n\r\n        <div class=\"half-field\">\r\n          <div class=\"sign-field\">\r\n            <label>New Password <span>*</span></label>\r\n            <div class=\"sign-input\" [ngClass]=\"(formControls?.password?.invalid && (formControls?.password?.touched || formControls?.password?.dirty))? 'error' : (formControls?.password?.valid && (formControls?.password?.touched || formControls?.password?.dirty)) ? 'success' : ''\" >\r\n              <input type=\"password\" placeholder=\"Enter New Password\" formControlName=\"password\" required>\r\n              <img *ngIf=\"formControls?.password?.valid && (formControls?.password?.touched || formControls?.password?.dirty)\"\r\n                src=\"assets/images/icons/tick.png\">\r\n              <img *ngIf=\"formControls?.password?.invalid && (formControls.password?.touched || formControls?.password?.dirty)\"\r\n                src=\"assets/images/icons/clear.png\">\r\n            </div>\r\n            <ng-container *ngIf=\"formControls?.password?.invalid && (formControls?.password?.touched || formControls?.password?.dirty)\">\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.password?.errors.required\">New Password Is Required</p>\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.password?.errors.minlength\">New Password Must Be of min 6 characters</p>\r\n            </ng-container>\r\n          </div>\r\n\r\n\r\n          <div class=\"sign-field\">\r\n            <label>Repeat Password <span>*</span></label>\r\n            <div class=\"sign-input\" [ngClass]=\"(formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty))? 'error' : (formControls?.password?.valid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)) ? 'success' : ''\" >\r\n              <input type=\"password\" placeholder=\"Re-Enter Your Password\" formControlName=\"confirmPassword\" required>\r\n              <img *ngIf=\"formControls?.confirmPassword?.valid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\"\r\n                src=\"assets/images/icons/tick.png\">\r\n              <img *ngIf=\"formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\"\r\n                src=\"assets/images/icons/clear.png\">\r\n            </div>\r\n            <ng-container *ngIf=\"formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\">\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.confirmPassword?.errors.required\">Confirm Password Is Required</p>\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.confirmPassword?.errors.minlength\">Confirm Password Must Be of min 6 characters</p>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n        <button class=\"blue-button\" type=\"submit\">Update Password</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { OrderDetails } from 'src/app/dataModels/order-details';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-my-orders',\r\n  templateUrl: './my-orders.component.html',\r\n  styleUrls: ['./my-orders.component.css']\r\n})\r\nexport class MyOrdersComponent implements OnInit {\r\n\r\n  orderHistoryData: Array<OrderDetails> = new Array<OrderDetails>(); // assigning orderHistoryData array of OrderDetails type\r\n\r\n\r\n  constructor(private router: Router, private apiService: ApiService) { }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('id')){\r\n      this.getOrderHistory(window.atob(sessionStorage.getItem('id')));\r\n    }\r\n  }\r\n\r\n  // function to getOrderHistory by using userId\r\n  getOrderHistory(userId: string): void{\r\n    const userData = {\r\n      user_id: +userId\r\n    };\r\n    this.apiService.orderHistory(userData).subscribe(res => {\r\n      if (res[`code`] === 200){\r\n        this.orderHistoryData = res[`orders`]; // assigning response from orderHistory api to orderHistoryData\r\n        // using sort() method to sort details by dates newest date 1st\r\n        this.orderHistoryData.sort( (a, b) => {\r\n          return Date.parse(b.updated_at) - Date.parse(a.updated_at);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to navigate to order component by passing orderId in router Params\r\n  navigateToOrderDetails(orderId: string): void{\r\n    this.router.navigate(['/orderHistory'], {queryParams: {orderId}});\r\n  }\r\n\r\n}\r\n","<ul class=\"nav nav-tabs\">\r\n  <li class=\"active\"><a data-toggle=\"tab\" href=\"#personal\">Order History</a></li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n\r\n  <div id=\"order\" class=\"tab-pane fade in active\" *ngIf=\"this.orderHistoryData.length; else orderHistory\">\r\n\r\n    <p>Below are the orders booked by you:-</p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 history\">\r\n        <div class=\"order-list\" *ngFor=\"let eachOrder of orderHistoryData\">\r\n          <div class=\"order-row\">\r\n            <div class=\"col-md-3 col-xs-6\">\r\n              <span>Order ID:</span>\r\n              <span class=\"bolder\">{{eachOrder?.id}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Placed On:</span>\r\n              <span class=\"bolder\">{{eachOrder?.created_at | date: 'mediumDate'}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Items:</span>\r\n              <span class=\"bolder\">{{eachOrder?.itemQuantity}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Order Amount:</span>\r\n              <span class=\"bolder\">${{eachOrder?.amount}}</span>\r\n            </div>\r\n            <div class=\"col-md-3 col-xs-12\">\r\n              <span class=\"viewDetails\"><a href=\"javascript:void(0)\" (click)=\"navigateToOrderDetails(eachOrder?.id)\">View Details</a></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"order-status\">\r\n            <img style=\"padding-right: 3px\" src=\"assets/images/icons/orange-dot.png\">Ordered on, {{eachOrder?.updated_at | date: 'mediumDate'}}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-template #orderHistory>\r\n    <p>No orders found.</p>\r\n  </ng-template>\r\n\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainSectionComponent } from './main-section/main-section.component';\r\nimport { MyAddressComponent } from './my-address/my-address.component';\r\nimport { MyOrdersComponent } from './my-orders/my-orders.component';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'account', component: MainSectionComponent, children: [\r\n      { path: '', redirectTo: 'my-profile' },\r\n      { path: 'my-profile', component: MyProfileComponent },\r\n      { path: 'my-address', component: MyAddressComponent },\r\n      { path: 'my-orders', component: MyOrdersComponent }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class ProfileRoutingModule { }\r\n"]}