{"version":3,"sources":["./src/app/views/profile/my-address/my-address.component.ts","./src/app/views/profile/my-address/my-address.component.html","./src/app/views/profile/profile.module.ts","./src/app/views/profile/main-section/main-section.component.ts","./src/app/views/profile/main-section/main-section.component.html","./src/app/views/profile/my-profile/my-profile.component.ts","./src/app/views/profile/my-profile/my-profile.component.html","./src/app/views/profile/my-orders/my-orders.component.ts","./src/app/views/profile/my-orders/my-orders.component.html","./src/app/views/profile/profile-routing.module.ts"],"names":[],"mappings":"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","file":"views-profile-profile-module-es2015.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Subscription } from 'rxjs';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-my-address',\r\n  templateUrl: './my-address.component.html',\r\n  styleUrls: ['./my-address.component.css']\r\n})\r\nexport class MyAddressComponent implements OnInit, OnDestroy {\r\n\r\n  subscribe: Subscription[] = []; // subscribe used to store subscription\r\n  addressList = []; // used to assign address list of user\r\n  addressForm: FormGroup; // address form of type formGroup\r\n  cityInfo: any[] = ['']; // used to store city data\r\n  stateInfo: any[] = []; // used to store state data\r\n  countryInfo: any[] = []; // used to store country data\r\n  addressId: string; // used to store addressId\r\n  addNewAddress: boolean = false; // use to check to addNew address or not\r\n  modalText: string;\r\n  constructor(private apiService: ApiService, private toaster: ToastrService, private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('id')) {\r\n      this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n    }\r\n    this.getCountries();\r\n    this.createAddressForm();\r\n  }\r\n\r\n  // function to create addressForm\r\n  createAddressForm(): void {\r\n    this.addressForm = this.fb.group({\r\n      title: new FormControl('', Validators.required),\r\n      first_name: new FormControl('', Validators.required),\r\n      middle_name: new FormControl(''),\r\n      last_name: new FormControl('', Validators.required),\r\n      phone: new FormControl('', [Validators.pattern('[0-9 ]{10,12}'), Validators.required]),\r\n      house_no: new FormControl('', Validators.required),\r\n      city: new FormControl('', Validators.required),\r\n      state: new FormControl('', Validators.required),\r\n      pincode: new FormControl('', [Validators.pattern('[0-9 ]{4}'), Validators.required]),\r\n      country: new FormControl('Australia')\r\n    });\r\n  }\r\n\r\n  // function to getCountries from getCountryData function\r\n  getCountries(): void {\r\n    this.subscribe.push(this.apiService.getCountryData().subscribe(res => {\r\n      if (res) {\r\n        this.countryInfo = res[`countries`]; // assigning response to countryInfo array\r\n        this.onChangeCountry('Australia');\r\n      }\r\n    }));\r\n  }\r\n\r\n  // function to getAddressList by passing userId to getAllAddress function\r\n  getAddressList(userId): void {\r\n    const userData = {\r\n      user_id: +userId\r\n    };\r\n    this.subscribe.push(this.apiService.getAllAddress(userData).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.addressList = res[`address`]; // assigning response to addressList array\r\n      }\r\n    }, err => {\r\n      this.toaster.error(err?.error?.message || err?.message);\r\n    }));\r\n  }\r\n\r\n  // function to get controls of address form\r\n  get formControl(): any {\r\n    return this.addressForm.controls;\r\n  }\r\n\r\n  onInputChange(validNumber, type): void{\r\n    let maxLength = 0;\r\n    if (type === 'phone'){\r\n      maxLength = 12;\r\n      if (validNumber.length >= maxLength){\r\n        this.addressForm.patchValue({\r\n          phone: validNumber.substring(0, 12)\r\n        });\r\n      }\r\n    }else if (type === 'zip'){\r\n      maxLength = 4;\r\n      if (validNumber.length >= maxLength){\r\n        this.addressForm.patchValue({\r\n          pincode: validNumber.substring(0, 4)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // function to get countryName and statesList according to countryValue\r\n  onChangeCountry(countryValue): void {\r\n    this.cityInfo = [];\r\n    const countryIndex = this.countryInfo.findIndex(res => res.name === countryValue);\r\n    this.stateInfo = this.countryInfo[countryIndex].states;\r\n    if (this.addressForm.controls[`state`].value !== null){\r\n      this.addressForm.controls[`state`].setValue(null, {onlySelf: true});\r\n      this.addressForm.controls[`city`].setValue(null, {onlySelf: true});\r\n    }\r\n  }\r\n\r\n  onChangeState(stateValue): void {\r\n     const stateIndex = this.stateInfo.findIndex(res => res.name === stateValue);\r\n     this.cityInfo = this.stateInfo[stateIndex].cities;\r\n  }\r\n\r\n  // function to open popUp Modal according to modalType\r\n  openModal(modalType: string, addressId: string): void {\r\n    if (modalType === 'delete') {\r\n      const show = document.getElementById('deleteModal') as HTMLElement;\r\n      show.classList.add('in');\r\n      show.style.display = 'block';\r\n      this.addressId = addressId;\r\n    }\r\n    else if (modalType === 'update') {\r\n      this.addressId = addressId;\r\n      this.modalText = 'Edit address';\r\n      this.addressList.forEach(eachAddress => {\r\n        if (eachAddress.id === this.addressId) {\r\n          this.patchAddressForm(eachAddress);\r\n        }\r\n      });\r\n      this.showModal();\r\n    }\r\n    else if (modalType === 'add'){\r\n      this.addNewAddress = true;\r\n      this.modalText = 'Add address';\r\n      this.getCountries();\r\n      this.addressForm.reset();\r\n      this.showModal();\r\n    }\r\n  }\r\n\r\n  // function to open modal\r\n  showModal(): void{\r\n    const show = document.getElementById('changeModal') as HTMLElement;\r\n    show.classList.add('in');\r\n    show.style.display = 'block';\r\n  }\r\n\r\n  // function to close modal\r\n  closeModal(modalType?: string): void {\r\n    if (modalType === 'delete') {\r\n      const show = document.getElementById('deleteModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n    }\r\n    else if (modalType === 'update') {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n      this.addNewAddress = false;\r\n    }\r\n    else if (modalType === 'add') {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n      this.addNewAddress = false;\r\n    }else {\r\n      const show = document.getElementById('changeModal') as HTMLElement;\r\n      show.classList.remove('in');\r\n      show.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  // assign values from addressList to form fields\r\n  patchAddressForm(addressData): void {\r\n    // findIndex() method returns the index of the first element in the array that satisfies the condition\r\n    const countryIndex = this.countryInfo.findIndex(res => res.name === addressData?.country);\r\n\r\n    this.stateInfo = this.countryInfo[countryIndex].states;\r\n    // findIndex() method returns the index of the first element in the array that satisfies the condition\r\n    const stateIndex = this.stateInfo.findIndex(res => res.name === addressData?.state);\r\n    this.cityInfo = this.stateInfo[stateIndex].cities;\r\n\r\n    this.addressForm.patchValue({\r\n      title: addressData?.title,\r\n      first_name: addressData?.first_name,\r\n      middle_name: addressData?.middle_name,\r\n      last_name: addressData?.last_name,\r\n      phone: addressData?.phone,\r\n      house_no: addressData?.house_no,\r\n      city: addressData?.city,\r\n      state: addressData?.state,\r\n      pincode: addressData?.pincode,\r\n      country: addressData?.country\r\n    });\r\n  }\r\n\r\n  // function to delete address by passing addressId in deleteAddress api\r\n  deleteAddress(): void {\r\n    this.subscribe.push(this.apiService.deleteAddress(this.addressId).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.toaster.success(res[`message`]);\r\n        // this.getAddressList(window.atob(localStorage.getItem('id')));\r\n        this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n        this.closeModal('delete');\r\n      }\r\n    }));\r\n  }\r\n\r\n  // function to validate all fields according to formType\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // function to update and add new address\r\n  updateAddress(form): void {\r\n    if (form.invalid) {\r\n      this.validateAllFields(form);  // if form in invalid then call validateAllfields function\r\n    } else {\r\n      let countryName;\r\n      if (form?.value?.country === null) {\r\n        this.addressForm.controls[`country`].setValue('Australia', {onlySelf: true});\r\n        countryName = 'Australia';\r\n      }else {\r\n        countryName = form.value.country;\r\n      }\r\n\r\n      const addressUpdateData = {\r\n        user_id: window.atob(sessionStorage.getItem('id')),\r\n        title: form.value.title,\r\n        first_name: form.value.first_name,\r\n        middle_name: form.value.middle_name,\r\n        last_name: form.value.last_name,\r\n        phone: form.value.phone,\r\n        pincode: form.value.pincode,\r\n        city: form.value.city,\r\n        house_no: form.value.house_no,\r\n        state: form.value.state,\r\n        country: countryName\r\n      };\r\n      if (this.addNewAddress){ // checking address type is new or not\r\n        this.apiService.addAddress(addressUpdateData).subscribe(res => {\r\n          if (res[`code`] === 200) {\r\n            this.toaster.success(res[`message`]);\r\n            this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n            this.closeModal('update');\r\n            this.addNewAddress = false;\r\n          }\r\n        });\r\n      }else{\r\n        addressUpdateData[`id`] = this.addressId;\r\n        if (this.addressForm.dirty){\r\n          this.apiService.updateAddress(addressUpdateData).subscribe(res => {\r\n            if (res[`code`] === 200) {\r\n              this.toaster.success(res[`message`]);\r\n              this.getAddressList(window.atob(sessionStorage.getItem('id')));\r\n              this.closeModal('update');\r\n            }\r\n          });\r\n        }else {\r\n          this.toaster.error('Nothing changed to update');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // to unsubscribe the subscriptions\r\n  ngOnDestroy(): void {\r\n    // Called once, before the instance is destroyed.\r\n    // Add 'implements OnDestroy' to the class.\r\n    this.subscribe.forEach(sub => {\r\n      if (sub) {\r\n        sub.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","  <ul class=\"nav nav-tabs\">\r\n    <li class=\"active\"><a data-toggle=\"tab\" href=\"#personal\">Address Details</a></li>\r\n  </ul>\r\n\r\n  <div class=\"tab-content\">\r\n\r\n    <div id=\"order\" class=\"tab-pane fade in active\">\r\n\r\n      <p>Manage all the shipping addresses you want (work place, home address ...) This way you won't have to enter the\r\n        shipping address manually with each order.</p>\r\n\r\n      <button class=\"blue-button\" (click)=\"openModal('add', '')\" style=\"margin-bottom: 2px;\">Add Address</button>\r\n\r\n\r\n      <div class=\"order-row address-detail\" *ngFor=\"let eachAddress of addressList; let addressCount = index\">\r\n        <div class=\"order-left\">\r\n          <div class=\"order-desc\">\r\n            <h2>{{eachAddress?.name}}</h2>\r\n            <p>\r\n              {{eachAddress?.house_no}}\r\n              {{eachAddress?.city}} {{eachAddress?.state}},\r\n              {{eachAddress?.country}} {{eachAddress?.pincode}}\r\n              {{eachAddress?.phone}}</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"order-status\">\r\n          <button class=\"blue-button\" style=\"margin-right: 4px;\"\r\n            (click)=\"openModal('update', eachAddress?.id)\">Change</button>\r\n          <button [ngStyle]=\"{'visibility': addressCount === 0? 'hidden': 'visible'}\" class=\"white-button\" (click)=\"openModal('delete', eachAddress?.id)\">Delete</button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div id=\"changeModal\" class=\"modal fade\" role=\"dialog\">\r\n    <div class=\"modal-dialog\">\r\n\r\n      <!-- Modal content-->\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">{{modalText}}</h5>\r\n          <button type=\"button\" class=\"close\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"address-row\">\r\n\r\n            <h3>Contact Detail</h3>\r\n\r\n            <form [formGroup]=\"addressForm\">\r\n              <div class=\"address-feild\">\r\n                <label>Title <span>*</span></label>\r\n                <select formControlName=\"title\"\r\n                  [ngClass]=\"(formControl?.title?.invalid && (formControl?.title?.touched || formControl?.title?.dirty))? 'red' : (formControl?.title?.valid && (formControl?.title?.touched || formControl?.title?.dirty)) ? 'green' : ''\"\r\n                  required>\r\n                  <option [ngValue]=\"null\" disabled=\"disabled\">Select title</option>\r\n                  <option value=\"Mr\">Mr.</option>\r\n                  <option value=\"Ms\">Ms.</option>\r\n                  <option value=\" \"></option>\r\n                </select>\r\n                <p class=\"error-addressMsg\"\r\n                  *ngIf=\"formControl?.title?.invalid && (formControl?.title?.touched || formControl?.title?.dirty)\">\r\n                  Select title</p>\r\n              </div>\r\n\r\n              <div class=\"name-container\">\r\n                <div class=\"address-feild address2\">\r\n                  <label>First Name<span>*</span></label>\r\n                  <input type=\"text\" placeholder=\"First Name\" formControlName=\"first_name\"\r\n                    [ngClass]=\"(formControl?.first_name?.errors?.required && (formControl?.first_name?.touched || formControl?.first_name?.dirty))? 'red' : (formControl?.first_name?.valid && (formControl?.first_name?.touched || formControl?.first_name?.dirty)) ? 'green' : ''\"\r\n                    required>\r\n                  <ng-container\r\n                    *ngIf=\"formControl?.first_name?.invalid && (formControl?.first_name?.touched || formControl?.first_name?.dirty)\">\r\n                    <p class=\"error-addressMsg\" *ngIf=\"formControl?.first_name?.errors.required\">First name is required</p>\r\n                  </ng-container>\r\n                </div>\r\n                <div class=\"address-feild address2\">\r\n                  <label>Middle Name</label>\r\n                  <input type=\"text\" placeholder=\"Middle Name\" formControlName=\"middle_name\">\r\n                </div>\r\n\r\n                <div class=\"address-feild address2\">\r\n                  <label>Last Name <span>*</span></label>\r\n                  <input type=\"text\" placeholder=\"Last Name\" formControlName=\"last_name\"\r\n                    [ngClass]=\"(formControl?.last_name?.errors?.required && (formControl?.last_name?.touched || formControl?.last_name?.dirty))? 'red' : (formControl?.last_name?.valid && (formControl?.last_name?.touched || formControl?.last_name?.dirty)) ? 'green' : ''\"\r\n                    required>\r\n                  <ng-container\r\n                    *ngIf=\"formControl?.last_name?.invalid && (formControl?.last_name?.touched || formControl?.last_name?.dirty)\">\r\n                    <p class=\"error-addressMsg\" *ngIf=\"formControl?.last_name?.errors.required\">Last name is required\r\n                    </p>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Contact Number <span>*</span></label>\r\n                <input type=\"text\" placeholder=\"Contact Number\" appNumOnly (input)=\"onInputChange($event.target.value, 'phone')\" formControlName=\"phone\"\r\n                [ngClass]=\"((formControl?.phone?.errors?.required || formControl?.phone?.errors?.pattern) && (formControl?.phone?.touched || formControl?.phone?.dirty))? 'red' : (formControl?.phone?.valid && (formControl?.phone?.touched || formControl?.phone?.dirty)) ? 'green' : ''\" required>\r\n                <ng-container *ngIf=\"formControl?.phone?.invalid && (formControl?.phone?.touched || formControl?.phone?.dirty)\">\r\n                  <p class=\"validation-error\" *ngIf=\"formControl?.phone?.errors.required\">Phone number is required</p>\r\n                  <p class=\"validation-error\" *ngIf=\"formControl?.phone?.errors.pattern\">Enter valid phone number</p>\r\n                </ng-container>\r\n              </div>\r\n              <h3>Address</h3>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Address(House No., Building , street)<span>*</span></label>\r\n                <input type=\"text\" placeholder=\"Address\" formControlName=\"house_no\"\r\n                [ngClass]=\"(formControl?.house_no?.invalid && (formControl?.house_no?.touched || formControl?.house_no?.dirty))? 'red' : (formControl?.house_no?.valid && (formControl?.house_no?.touched || formControl?.house_no?.dirty)) ? 'green' : ''\" required>\r\n                <p class=\"validation-error\" *ngIf=\"formControl?.house_no?.invalid && (formControl?.house_no?.touched || formControl?.house_no?.dirty)\">Address Is Required</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Country <span>*</span></label>\r\n                <select formControlName=\"country\" (change)=\"onChangeCountry($event.target.value)\"\r\n                [ngClass]=\"(formControl?.country?.invalid && (formControl?.country?.touched || formControl?.country?.dirty))? 'red' : (formControl?.country?.valid && (formControl?.country?.touched || formControl?.country?.dirty)) ? 'green' : ''\">\r\n                  <option *ngFor=\"let eachCountry of countryInfo; let countryCount = index\" value=\"{{eachCountry?.name}}\">{{eachCountry.name}}</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>State <span>*</span></label>\r\n                <select formControlName=\"state\" (change)=\"onChangeState($event.target.value)\"\r\n                [ngClass]=\"(formControl?.state?.invalid && (formControl?.state?.touched || formControl?.state?.dirty))? 'red' : (formControl?.state?.valid && (formControl?.state?.touched || formControl?.state?.dirty)) ? 'green' : ''\" required>\r\n                <option [ngValue]=\"null\" disabled=\"disabled\">Please select state</option>\r\n                <option *ngFor=\"let eachState of stateInfo; let stateCount = index\" value=\"{{eachState?.name}}\">{{eachState.name}}</option>\r\n                </select>\r\n                <p class=\"validation-error\" *ngIf=\"formControl?.state?.invalid && (formControl?.state?.touched || formControl?.state?.dirty)\">Select state from list</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\" >\r\n                <label>City <span>*</span></label>\r\n                <select formControlName=\"city\"\r\n                [ngClass]=\"(formControl?.city?.invalid && (formControl?.city?.touched || formControl?.city?.dirty))? 'red' : (formControl?.state?.valid && (formControl?.city?.touched || formControl?.city?.dirty)) ? 'green' : ''\" required>\r\n                <option [ngValue]=\"null\" disabled=\"disabled\">Please select city</option>\r\n                <option *ngFor=\"let eachCity of cityInfo; let cityCount = index\" value=\"{{eachCity?.name}}\">{{eachCity.name}}</option>\r\n                </select>\r\n                <p class=\"error-addressMsg\" *ngIf=\"formControl?.city?.invalid && (formControl?.city?.touched || formControl?.city?.dirty)\">Select city from list</p>\r\n              </div>\r\n\r\n              <div class=\"address-feild\">\r\n                <label>Postal code<span>*</span></label>\r\n                <input type=\"text\" placeholder=\"1234\" appNumOnly (input)=\"onInputChange($event.target.value, 'zip')\" formControlName=\"pincode\"\r\n                [ngClass]=\"((formControl?.pincode?.errors?.required || formControl?.pincode?.errors?.pattern) && (formControl?.pincode?.touched || formControl?.pincode?.dirty))? 'red' : (formControl?.pincode?.valid && (formControl?.pincode?.touched || formControl?.pincode?.dirty)) ? 'green' : ''\" required>\r\n                <ng-container *ngIf=\"formControl?.pincode?.invalid && (formControl?.pincode?.touched || formControl?.pincode?.dirty)\">\r\n                  <div class=\"validation-error\" *ngIf=\"formControl?.pincode?.errors.required\">Postal code is required</div>\r\n                  <div class=\"validation-error\" *ngIf=\"formControl?.pincode?.errors.pattern\">Enter valid postal code</div>\r\n                </ng-container>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\" blue-button\" (click)=\"updateAddress(addressForm)\">Save</button>\r\n          <button type=\"button\" class=\" blue-button\" (click)=\"closeModal('update')\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <div id=\"deleteModal\" class=\"modal fade\" role=\"dialog\">\r\n    <div class=\"modal-dialog\">\r\n\r\n      <!-- Modal content-->\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-body\">\r\n          <div class=\"delete-txt\">\r\n            <div class=\"remove-sec\">Are you sure to delete this ?<p></p>\r\n            </div>\r\n\r\n            <button class=\"blue-button\" (click)=\"deleteAddress()\">Yes</button>\r\n            <button class=\"blue-button\" (click)=\"closeModal('delete')\">Cancel</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MainSectionComponent } from './main-section/main-section.component';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\nimport { MyAddressComponent } from './my-address/my-address.component';\r\nimport { MyOrdersComponent } from './my-orders/my-orders.component';\r\nimport { DirectivesModule } from 'src/app/directives/directives.module';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [MainSectionComponent, MyProfileComponent, MyAddressComponent, MyOrdersComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    DirectivesModule,\r\n    ProfileRoutingModule,\r\n    DirectivesModule\r\n  ]\r\n})\r\nexport class ProfileModule { }\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-main-section',\r\n  templateUrl: './main-section.component.html',\r\n  styleUrls: ['./main-section.component.css']\r\n})\r\nexport class MainSectionComponent implements OnInit, OnDestroy {\r\n\r\n  routePath = 'My Profile'; // default routPath\r\n  urlLength: number; // assign urlLength\r\n  subscription: Subscription; // subscribe used to store subscription\r\n\r\n  constructor(private route: Router, private toaster: ToastrService, private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n    // if (localStorage.getItem('id')){ // checking userId\r\n    if (sessionStorage.getItem('id')){ // checking userId\r\n      this.subscription = this.route.events.subscribe(res => {\r\n        if (res instanceof NavigationEnd){\r\n          // split() method is used to split a string into an array of substrings and return a new array\r\n          const url = res.url.split('/');\r\n          this.urlLength = url.length;\r\n          if (url[2] === 'my-profile'){\r\n            this.routePath = 'My Profile';\r\n          }else if (url[2] === 'my-address'){\r\n            this.routePath = 'My Address';\r\n          }else if (url[2] === 'my-orders'){\r\n            this.routePath = 'My Orders';\r\n          }\r\n        }\r\n      });\r\n    }else{\r\n      this.toaster.success('Please sign-in to continue');\r\n      this.route.navigate(['/sign-in']);\r\n    }\r\n  }\r\n\r\n  // function to open modal\r\n  openModal(): void {\r\n    const show = document.getElementById('logoutModal') as HTMLElement;\r\n    show.classList.add('in');\r\n    show.style.display = 'block';\r\n  }\r\n\r\n  // function to close modal\r\n  closeModal(): void {\r\n    const show = document.getElementById('logoutModal') as HTMLElement;\r\n    show.classList.remove('in');\r\n    show.style.display = 'none';\r\n  }\r\n\r\n  // function to logOut\r\n  logout(): void{\r\n    this.authService.logOut();\r\n  }\r\n\r\n  // to unsubscribe the subscriptions\r\n  ngOnDestroy(): void{\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"main-container profile-container addresspage\">\r\n\r\n  <div class=\"breadcrum\">\r\n    <div class=\"container\">\r\n      <p *ngIf=\"urlLength === 3 || routePath == 'My Profile'\"><a href=\"javascript:void(0)\"\r\n          [routerLink]=\"['/home']\">Home</a> <span>/</span> {{ routePath}} </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"profile-section\">\r\n    <div class=\"container\">\r\n      <div class=\"account-section\">\r\n        <div class=\"account-sidebar\">\r\n          <h3>My Account</h3>\r\n          <span>Personal Details</span>\r\n          <ul>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-profile']\">My Profile</a>\r\n            </li>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-address']\">Address</a></li>\r\n          </ul>\r\n          <span>Order Details</span>\r\n          <ul>\r\n            <li routerLinkActive=\"active\"><a href=\"javascript:void(0)\" [routerLink]=\"['./my-orders']\">Order History</a>\r\n            </li>\r\n            <li><a href=\"javascript:void(0)\" (click)=\"openModal()\">Logout</a></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"account-tab\">\r\n          <router-outlet></router-outlet>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<div id=\"logoutModal\" class=\"modal fade\" role=\"dialog\">\r\n  <div class=\"modal-dialog\">\r\n\r\n    <!-- Modal content-->\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <div class=\"delete-txt\">\r\n          <div class=\"remove-sec\">Are you sure to log out ?<p></p>\r\n          </div>\r\n\r\n          <button class=\"blue-button\" (click)=\"logout()\">Log Out</button>\r\n          <button class=\"blue-button\" (click)=\"closeModal()\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-my-profile',\r\n  templateUrl: './my-profile.component.html',\r\n  styleUrls: ['./my-profile.component.css']\r\n})\r\nexport class MyProfileComponent implements OnInit {\r\n\r\n  personalDataForm: FormGroup; // personalData form of type formGroup\r\n  passwordUpdateForm: FormGroup; // passwordUpdate form of type formGroup\r\n  userId: number; // used to store userId\r\n  userData: any; // used to store userData\r\n\r\n  constructor(private fb: FormBuilder, private toaster: ToastrService, private apiService: ApiService,\r\n              private authService: AuthService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createPersonalDataForm();\r\n    this.createPasswordUpdateForm();\r\n    if (sessionStorage.getItem('id')) {\r\n      this.userId = +window.atob(sessionStorage.getItem('id'));\r\n      this.getUserDetails(this.userId);\r\n    }\r\n  }\r\n\r\n  // function to getUSerDetails by calling userDetails api\r\n  getUserDetails(userId): void {\r\n    this.apiService.getUserDetails(userId).subscribe(res => {\r\n      if (res[`code`] === 200) {\r\n        this.userData = res[`details`];\r\n        this.patchPersonalDataForm();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // function to create personalDataForm\r\n  createPersonalDataForm(): void {\r\n    this.personalDataForm = this.fb.group({\r\n      name: new FormControl('', [Validators.required, Validators.maxLength(15)]),\r\n      email: new FormControl('', [Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'), Validators.required]),\r\n    });\r\n  }\r\n\r\n  // function to create passwordForm\r\n  createPasswordUpdateForm(): void {\r\n    this.passwordUpdateForm = this.fb.group({\r\n      oldPassword: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      confirmPassword: new FormControl('', [Validators.required, Validators.minLength(6)])\r\n    });\r\n  }\r\n\r\n  // function to get controls of personalData form\r\n  get formControl(): any {\r\n    return this.personalDataForm.controls;\r\n  }\r\n\r\n   // function to get controls of passwordUpdate form\r\n  get formControls(): any {\r\n    return this.passwordUpdateForm.controls;\r\n  }\r\n\r\n  // function to set Personal data\r\n  patchPersonalDataForm(): void {\r\n    this.personalDataForm.patchValue({\r\n      name: this.userData.name,\r\n      email: this.userData.email\r\n    });\r\n  }\r\n\r\n  // function to submit personalData form\r\n  submitPersonalDataForm(form): void {\r\n    if (form.invalid) { // condition checking if form is valid or not\r\n      this.validateAllFields(form, 'profileForm'); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      form.value.id = this.userId;\r\n      this.apiService.updatePersonalDetails(form.value).subscribe(res => {\r\n        if (res[`code`] === 200){\r\n          sessionStorage.setItem('currentUser', window.btoa(res[`user`][0].name)); /* setting username from updateApi to override\r\n                                                                        previous userName in sessionStorage */\r\n          this.authService.getCurrentUser(); // calling authService getCurrentUser function\r\n          this.toaster.success(res[`message`]);\r\n        }\r\n      }, err => {\r\n        this.toaster.error(err?.error?.message || err?.message);\r\n      });\r\n    }\r\n  }\r\n\r\n  // function to submit passwordData form\r\n  submitPasswordUpdateForm(form): void {\r\n    if (form.invalid) { // condition checking if form is valid or not\r\n      this.validateAllFields(form, 'passwordForm'); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      if (form.value.password === form.value.confirmPassword) { // comparing the password and confirmPassword Values\r\n        form.value.user_id = this.userId;\r\n        this.apiService.updatePassword(form.value).subscribe(res => {\r\n          if (res[`code`] === 200) {\r\n            this.toaster.success(res[`message`]);\r\n            form.reset(); // function to reset form\r\n          }\r\n        }, err => {\r\n          this.toaster.error('Current Password is incorrect');\r\n        });\r\n      } else {\r\n        this.toaster.error('Password Didn\\'t Match...Please Try Again!!!');\r\n      }\r\n    }\r\n  }\r\n\r\n  // function to validate all fields according to formType\r\n  validateAllFields(formGroup: FormGroup, formType: string): void {\r\n    if (formType === 'passwordForm') {\r\n      Object.keys(this.formControls).forEach(field => {\r\n        const control = formGroup.get(field);\r\n        if (control instanceof FormControl) {\r\n          control.markAsTouched({ onlySelf: true });\r\n        } else if (control instanceof FormGroup) {\r\n          this.validateAllFields(control, formType);\r\n        }\r\n      });\r\n    }else if (formType === 'profileForm'){\r\n      Object.keys(this.formControl).forEach(field => {\r\n        const control = formGroup.get(field);\r\n        if (control instanceof FormControl){\r\n          control.markAsTouched({onlySelf: true});\r\n        }else if (control instanceof FormGroup){\r\n          this.validateAllFields(control, formType);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<ul class=\"nav nav-tabs\">\r\n  <li class=\"active\">\r\n    <a data-toggle=\"tab\" href=\"#personal\">Personal Data</a>\r\n  </li>\r\n  <li>\r\n    <a data-toggle=\"tab\" href=\"#password\">Password Change</a>\r\n  </li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n\r\n  <div id=\"personal\" class=\"tab-pane fade in active\">\r\n\r\n    <p>Feel free to edit any of your details below so your account is always up to date</p>\r\n    <div class=\"sign-up-form\">\r\n      <form [formGroup]=\"personalDataForm\" (ngSubmit)=\"submitPersonalDataForm(personalDataForm)\">\r\n        <div class=\"sign-field\">\r\n          <label>Name <span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"(formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty))? 'error' : (formControl?.name?.valid && (formControl?.name?.touched || formControl?.name?.dirty)) ? 'success' : ''\">\r\n            <input type=\"text\" appTextOnly placeholder=\"Enter your Name\" formControlName=\"name\" appTextOnly required>\r\n            <img *ngIf=\"formControl?.name?.valid && (formControl?.name?.touched || formControl?.name?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img *ngIf=\"formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControl?.name?.invalid && (formControl?.name?.touched || formControl?.name?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.required\">Name Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.maxlength\">Name must not exceed 15 characters</p>\r\n          </ng-container>\r\n        </div>\r\n\r\n\r\n        <div class=\"sign-field\">\r\n          <label>Email <span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"((formControl?.email?.errors?.pattern || formControl?.email?.errors?.required) && (formControl?.email?.touched || formControls?.email?.dirty))? 'error' : (formControl?.email?.valid && (formControl?.email?.touched || formControl?.email?.dirty)) ? 'success' : ''\">\r\n            <input type=\"text\" placeholder=\"abc@xyz.com\" formControlName=\"email\" required>\r\n            <img *ngIf=\"formControl?.email?.valid && (formControl?.email?.touched || formControl?.email?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img *ngIf=\"formControl?.email?.invalid && (formControl?.email?.touched || formControl?.email?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControl?.email?.invalid && (formControl?.email?.touched || formControl?.email?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">Email Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">Enter valid email(abc@abc.abc)</p>\r\n          </ng-container>\r\n        </div>\r\n        <button class=\"blue-button\" type=\"submit\" [disabled]=\"personalDataForm.invalid\">Update personal Data</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"password\" class=\"tab-pane fade\">\r\n    <p>If you want to change the password to access your account, enter the folowing information:Your current\r\n      email address is {{userData?.email}}</p>\r\n    <div class=\"sign-up-form\">\r\n      <form [formGroup]=\"passwordUpdateForm\" (ngSubmit)=\"submitPasswordUpdateForm(passwordUpdateForm)\">\r\n        <div class=\"sign-field\">\r\n          <label>Current Password<span>*</span></label>\r\n          <div class=\"sign-input\" [ngClass]=\"(formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty))? 'error' : (formControls?.oldPassword?.valid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)) ? 'success' : ''\" >\r\n            <input type=\"password\" placeholder=\"Enter Current Password\" formControlName=\"oldPassword\" required>\r\n            <img\r\n              *ngIf=\"formControls?.oldPassword?.valid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\"\r\n              src=\"assets/images/icons/tick.png\">\r\n            <img\r\n              *ngIf=\"formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\"\r\n              src=\"assets/images/icons/clear.png\">\r\n          </div>\r\n          <ng-container *ngIf=\"formControls?.oldPassword?.invalid && (formControls?.oldPassword?.touched || formControls?.oldPassword?.dirty)\">\r\n            <p class=\"error-msg\" *ngIf=\"formControls?.oldPassword?.errors.required\">Password Is Required</p>\r\n            <p class=\"error-msg\" *ngIf=\"formControls?.oldPassword?.errors.minlength\">Password Must Be of min 6 characters</p>\r\n          </ng-container>\r\n        </div>\r\n\r\n\r\n        <div class=\"half-field\">\r\n          <div class=\"sign-field\">\r\n            <label>New Password <span>*</span></label>\r\n            <div class=\"sign-input\" [ngClass]=\"(formControls?.password?.invalid && (formControls?.password?.touched || formControls?.password?.dirty))? 'error' : (formControls?.password?.valid && (formControls?.password?.touched || formControls?.password?.dirty)) ? 'success' : ''\" >\r\n              <input type=\"password\" placeholder=\"Enter New Password\" formControlName=\"password\" required>\r\n              <img *ngIf=\"formControls?.password?.valid && (formControls?.password?.touched || formControls?.password?.dirty)\"\r\n                src=\"assets/images/icons/tick.png\">\r\n              <img *ngIf=\"formControls?.password?.invalid && (formControls.password?.touched || formControls?.password?.dirty)\"\r\n                src=\"assets/images/icons/clear.png\">\r\n            </div>\r\n            <ng-container *ngIf=\"formControls?.password?.invalid && (formControls?.password?.touched || formControls?.password?.dirty)\">\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.password?.errors.required\">New Password Is Required</p>\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.password?.errors.minlength\">New Password Must Be of min 6 characters</p>\r\n            </ng-container>\r\n          </div>\r\n\r\n\r\n          <div class=\"sign-field\">\r\n            <label>Repeat Password <span>*</span></label>\r\n            <div class=\"sign-input\" [ngClass]=\"(formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty))? 'error' : (formControls?.password?.valid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)) ? 'success' : ''\" >\r\n              <input type=\"password\" placeholder=\"Re-Enter Your Password\" formControlName=\"confirmPassword\" required>\r\n              <img *ngIf=\"formControls?.confirmPassword?.valid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\"\r\n                src=\"assets/images/icons/tick.png\">\r\n              <img *ngIf=\"formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\"\r\n                src=\"assets/images/icons/clear.png\">\r\n            </div>\r\n            <ng-container *ngIf=\"formControls?.confirmPassword?.invalid && (formControls?.confirmPassword?.touched || formControls?.confirmPassword?.dirty)\">\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.confirmPassword?.errors.required\">Confirm Password Is Required</p>\r\n              <p class=\"error-msg\" *ngIf=\"formControls?.confirmPassword?.errors.minlength\">Confirm Password Must Be of min 6 characters</p>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n        <button class=\"blue-button\" type=\"submit\">Update Password</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { OrderDetails } from 'src/app/dataModels/order-details';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-my-orders',\r\n  templateUrl: './my-orders.component.html',\r\n  styleUrls: ['./my-orders.component.css']\r\n})\r\nexport class MyOrdersComponent implements OnInit {\r\n\r\n  orderHistoryData: Array<OrderDetails> = new Array<OrderDetails>(); // assigning orderHistoryData array of OrderDetails type\r\n\r\n\r\n  constructor(private router: Router, private apiService: ApiService) { }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('id')){\r\n      this.getOrderHistory(window.atob(sessionStorage.getItem('id')));\r\n    }\r\n  }\r\n\r\n  // function to getOrderHistory by using userId\r\n  getOrderHistory(userId: string): void{\r\n    const userData = {\r\n      user_id: +userId\r\n    };\r\n    this.apiService.orderHistory(userData).subscribe(res => {\r\n      if (res[`code`] === 200){\r\n        this.orderHistoryData = res[`orders`]; // assigning response from orderHistory api to orderHistoryData\r\n        // using sort() method to sort details by dates newest date 1st\r\n        this.orderHistoryData.sort( (a, b) => {\r\n          return Date.parse(b.updated_at) - Date.parse(a.updated_at);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to navigate to order component by passing orderId in router Params\r\n  navigateToOrderDetails(orderId: string): void{\r\n    this.router.navigate(['/orderHistory'], {queryParams: {orderId}});\r\n  }\r\n\r\n}\r\n","<ul class=\"nav nav-tabs\">\r\n  <li class=\"active\"><a data-toggle=\"tab\" href=\"#personal\">Order History</a></li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n\r\n  <div id=\"order\" class=\"tab-pane fade in active\" *ngIf=\"this.orderHistoryData.length; else orderHistory\">\r\n\r\n    <p>Below are the orders booked by you:-</p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 history\">\r\n        <div class=\"order-list\" *ngFor=\"let eachOrder of orderHistoryData\">\r\n          <div class=\"order-row\">\r\n            <div class=\"col-md-3 col-xs-6\">\r\n              <span>Order ID:</span>\r\n              <span class=\"bolder\">{{eachOrder?.id}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Placed On:</span>\r\n              <span class=\"bolder\">{{eachOrder?.created_at | date: 'mediumDate'}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Items:</span>\r\n              <span class=\"bolder\">{{eachOrder?.itemQuantity}}</span>\r\n            </div>\r\n            <div class=\"col-md-2 col-xs-6\">\r\n              <span>Order Amount:</span>\r\n              <span class=\"bolder\">${{eachOrder?.amount}}</span>\r\n            </div>\r\n            <div class=\"col-md-3 col-xs-12\">\r\n              <span class=\"viewDetails\"><a href=\"javascript:void(0)\" (click)=\"navigateToOrderDetails(eachOrder?.id)\">View Details</a></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"order-status\">\r\n            <img style=\"padding-right: 3px\" src=\"assets/images/icons/orange-dot.png\">Ordered on, {{eachOrder?.updated_at | date: 'mediumDate'}}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-template #orderHistory>\r\n    <p>No orders found.</p>\r\n  </ng-template>\r\n\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainSectionComponent } from './main-section/main-section.component';\r\nimport { MyAddressComponent } from './my-address/my-address.component';\r\nimport { MyOrdersComponent } from './my-orders/my-orders.component';\r\nimport { MyProfileComponent } from './my-profile/my-profile.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'account', component: MainSectionComponent, children: [\r\n      { path: '', redirectTo: 'my-profile' },\r\n      { path: 'my-profile', component: MyProfileComponent },\r\n      { path: 'my-address', component: MyAddressComponent },\r\n      { path: 'my-orders', component: MyOrdersComponent }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class ProfileRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}