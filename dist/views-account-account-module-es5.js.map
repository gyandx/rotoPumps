{"version":3,"sources":["webpack:///src/app/views/account/sign-in/sign-in.component.ts","webpack:///src/app/views/account/sign-in/sign-in.component.html","webpack:///src/app/views/account/account.module.ts","webpack:///src/app/views/account/forget-password/forget-password.component.ts","webpack:///src/app/views/account/forget-password/forget-password.component.html","webpack:///src/app/views/account/sign-up/sign-up.component.ts","webpack:///src/app/views/account/sign-up/sign-up.component.html","webpack:///src/app/views/account/account-routing.module.ts"],"names":["SignInComponent","fb","apiService","route","authService","activatedRoute","toaster","location","queryParams","subscribe","res","signInType","createLoginForm","loginForm","group","email","pattern","required","password","minLength","formGroup","Object","keys","formControl","forEach","field","control","get","markAsTouched","onlySelf","validateAllFields","form","invalid","login","value","loginData","navigate","getCartCount","err","error","code","status","totalItemsInCart","origin","back","controls","submitSignInForm","signUp","selector","templateUrl","styleUrls","AccountModule","declarations","imports","ForgetPasswordComponent","createForgotPasswordForm","forgotPasswordForm","forgotPassword","then","success","submitForgotPasswordForm","SignUpComponent","signUpType","createSignUpForm","signUpForm","name","confirm_password","company_name","user_type","register","signInData","signIn","message","submitSignUpForm","routes","path","component","AccountRoutingModule","forChild","exports"],"mappings":"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","file":"views-account-account-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.css'],\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  loginForm: FormGroup; // loginForm form of type formGroup\r\n  signInType: string; // to detect the type of signUp(from normal signUp or signUp from cart)\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private apiService: ApiService,\r\n    private route: Router,\r\n    private authService: AuthService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private toaster: ToastrService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((res) => {\r\n      this.signInType = res[`origin`]; // get the signUp type from queryParams\r\n    });\r\n    this.createLoginForm();\r\n  }\r\n\r\n  // function to create signIn form\r\n  createLoginForm(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: new FormControl('', [\r\n        Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'),\r\n        Validators.required,\r\n      ]),\r\n      password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  // function to get controls of signUp form\r\n  get formControl(): any {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of signUp form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to submit signUp form\r\n  submitSignInForm(form): void {\r\n    if (form.invalid) {\r\n      // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      this.apiService.login(form.value).subscribe(\r\n        (res) => {\r\n          if (res[`code`] === 200) {\r\n            this.authService.loginData(res); // calling authService loginData to store info in localStorage.\r\n            if (this.signInType === 'cart') {\r\n              this.route.navigate(['/cart']); // if queryParams if from cart navigate to cart\r\n            } else if (this.signInType === 'cartAddress') {\r\n              this.route.navigate(['/cart/deliveryAddress']); // if queryParams if from buyNow navigate to cartAddress\r\n            } else {\r\n              this.getCartCount();\r\n              this.route.navigate(['/home']); // if queryParams if empty navigate to home\r\n            }\r\n          }\r\n        },\r\n        (err) => {\r\n          if (err?.error?.code === 400 || err?.status === 400) {\r\n            this.toaster.error('Invalid Credentials');\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  getCartCount(): void {\r\n    this.apiService.totalItemsInCart();\r\n  }\r\n\r\n  // function to signUp\r\n  signUp(): void {\r\n    if (this.signInType === 'cart') {\r\n      this.route.navigate(['/sign-up'], { queryParams: { origin: 'cart' } }); // navigate to signUp with queryParams 'cart'\r\n    } else if (this.signInType === 'cartAddress') {\r\n      this.route.navigate(['/sign-up'], {\r\n        queryParams: { origin: 'cartAddress' },\r\n      }); // navigate to signUp with queryParams 'cartAddress'\r\n    } else {\r\n      this.route.navigate(['/sign-up']); // navigate to signUp\r\n    }\r\n  }\r\n\r\n  // function to navigate back\r\n  goBack(): void {\r\n    if (this.signInType === 'cart') {\r\n      this.route.navigate(['/cart']);\r\n    } else if (this.signInType === 'cartAddress') {\r\n      this.location.back();\r\n    } else {\r\n      this.route.navigate(['/home']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"homepage\" style=\"background: #fff\">\r\n  <div>\r\n    <div class=\"container\"></div>\r\n  </div>\r\n  <div class=\"sign-up2\">\r\n    <div class=\"sign-up-form2 signUpPage2\">\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"submitSignInForm(loginForm)\">\r\n        <div class=\"sign-up-title\">\r\n          <h2>Sign In</h2>\r\n        </div>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Your Email\"\r\n              formControlName=\"email\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Enter Your Password\"\r\n              formControlName=\"password\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.password?.invalid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.required\">\r\n            Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.minlength\">\r\n            Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"remember-section\">\r\n          <span>\r\n            <a href=\"javascript:void(0)\" [routerLink]=\"['/forget-password']\"\r\n              >Forgot Password?</a\r\n            >\r\n          </span>\r\n        </div>\r\n        <button type=\"submit\">Sign in</button>\r\n        <div class=\"already-acc\">\r\n          Don't have an account?\r\n          <a href=\"javascript:void(0)\" (click)=\"signUp()\">Sign Up</a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DirectivesModule } from 'src/app/directives/directives.module';\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\n\r\n@NgModule({\r\n  declarations: [SignInComponent, SignUpComponent, ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AccountRoutingModule,\r\n    DirectivesModule\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.css']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  forgotPasswordForm: FormGroup; // forgotPassword form of type formGroup\r\n\r\n  constructor(private fb: FormBuilder, private apiService: ApiService, private toaster: ToastrService, private route: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createForgotPasswordForm();\r\n  }\r\n\r\n  // function to create forgotPassword form\r\n  createForgotPasswordForm(): void{\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: new FormControl('', [Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'), Validators.required])\r\n    });\r\n  }\r\n\r\n  // function to get controls of forgotPassword form\r\n  get formControl(): any {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of forgotPassword form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to submit forgotPassword form\r\n  submitForgotPasswordForm(form): void{\r\n    if (form.invalid){ // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    }else{\r\n      // calling forgotPassword api\r\n      this.apiService.forgotPassword(form.value).subscribe(res => {\r\n        if (res[`code`] === 200){\r\n          this.route.navigate(['/sign-in']).then(() => {\r\n            this.toaster.success(res[`message`]);\r\n          });\r\n        }else if (res[`code`] === 404) {\r\n          this.toaster.error(res[`message`]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"homepage\" style=\"background: #ECF3F6;\">\r\n  <div class=\"full-banner-home\">\r\n    <!-- <img src=\"assets/images/banner/BannerImage.png\"> -->\r\n    <div id=\"myhomeCarousel\" class=\"carousel slide\" data-ride=\"carousel\">\r\n      <!-- Wrapper for slides -->\r\n      <div class=\"carousel-inner\">\r\n        <div class=\"item active\">\r\n          <img src=\"assets/images/HomeBanner/Banner/1.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/2.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/3.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/4.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/5.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/6.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n\r\n        <div class=\"item\">\r\n          <img src=\"assets/images/HomeBanner/Banner/7.jpg\" alt=\"Home Banner\" />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Left and right controls -->\r\n      <a class=\"left carousel-control\" href=\"#myhomeCarousel\" data-slide=\"prev\">\r\n        <span><i class=\"fa fa-arrow-left fa-2x\"></i></span>\r\n\r\n        <span class=\"sr-only\">Previous</span>\r\n      </a>\r\n      <a\r\n        class=\"right carousel-control\"\r\n        href=\"#myhomeCarousel\"\r\n        data-slide=\"next\"\r\n      >\r\n        <span><i class=\"fa fa-arrow-right fa-2x\"></i></span>\r\n        <span class=\"sr-only\">Next</span>\r\n      </a>\r\n    </div>\r\n    <div class=\"container\"></div>\r\n  </div>\r\n  <div class=\"sign-up\">\r\n    <div class=\"sign-up-form signUpPage\">\r\n      <form\r\n        [formGroup]=\"forgotPasswordForm\"\r\n        (ngSubmit)=\"submitForgotPasswordForm(forgotPasswordForm)\"\r\n      >\r\n        <div class=\"sign-up-title\">\r\n          <div class=\"sign-back\">\r\n            <a href=\"javascript:void(0)\" [routerLink]=\"['/home']\"\r\n              ><img src=\"assets/images/icons/back.svg\" />Back</a\r\n            >\r\n          </div>\r\n          <h1>Forgot Password</h1>\r\n          <!-- <p>Welcome back</p> -->\r\n        </div>\r\n\r\n        <div\r\n          class=\"sign-field\"\r\n          [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \"\r\n        >\r\n          <label>Your Email</label>\r\n          <div class=\"sign-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"abc@xyz.com\"\r\n              formControlName=\"email\"\r\n              required\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/tick.png\"\r\n            />\r\n            <img\r\n              *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \"\r\n              src=\"assets/images/icons/clear.png\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <ng-container\r\n          *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \"\r\n        >\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n        <button type=\"submit\">Confirm</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.css'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  signUpForm: FormGroup; // signUpForm form of type formGroup\r\n  signUpType: string; // to detect the type of signUp(from normal signUp or signUp from cart)\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private apiService: ApiService,\r\n    private toaster: ToastrService,\r\n    private route: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private authService: AuthService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe((res) => {\r\n      this.signUpType = res.origin; // get the signUp type from queryParams\r\n    });\r\n    this.createSignUpForm();\r\n  }\r\n\r\n  // function to create signUp form\r\n  createSignUpForm(): void {\r\n    this.signUpForm = this.fb.group({\r\n      name: new FormControl('', Validators.required),\r\n      email: new FormControl('', [\r\n        Validators.pattern('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$'),\r\n        Validators.required,\r\n      ]),\r\n      password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n      confirm_password: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n      ]),\r\n      company_name: new FormControl(null, Validators.minLength(4)),\r\n      user_type: new FormControl('End User'),\r\n    });\r\n  }\r\n\r\n  // function to get controls of signUp form\r\n  get formControl(): any {\r\n    return this.signUpForm.controls;\r\n  }\r\n\r\n  // function to validate all fields of signUp form\r\n  validateAllFields(formGroup: FormGroup): void {\r\n    Object.keys(this.formControl).forEach((field) => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof FormControl) {\r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof FormGroup) {\r\n        this.validateAllFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to navigate back\r\n  goBack(): void {\r\n    if (this.signUpType === 'cart') {\r\n      this.route.navigate(['/cart']);\r\n    } else if (this.signUpType === 'cartAddress') {\r\n      this.location.back();\r\n    } else {\r\n      this.route.navigate(['/home']);\r\n    }\r\n  }\r\n\r\n  // function to submit signUp form\r\n  submitSignUpForm(form): void {\r\n    if (form.invalid) {\r\n      // condition checking if form is valid or not\r\n      this.validateAllFields(form); // if form in invalid then call validateAllfields function\r\n    } else {\r\n      if (form.value.password === form.value.confirm_password) {\r\n        // condition for checking password and confirmPassword are same or not\r\n        this.apiService.register(form.value).subscribe(\r\n          (res) => {\r\n            if (res[`code`] === 200) {\r\n              this.toaster.success(res[`message`]);\r\n              const signInData = {\r\n                email: form.value.email,\r\n                password: form.value.password,\r\n              };\r\n              this.signIn(signInData); // sign-in function for autoSignIn if registered successfully\r\n            }\r\n          },\r\n          (error) => {\r\n            if (error?.status) {\r\n              this.toaster.error(error?.error?.message);\r\n            }\r\n          }\r\n        );\r\n      } else if (form.value.password !== form.value.confirm_password) {\r\n        this.toaster.error('Password Not Matching!!! Try Again...');\r\n      }\r\n    }\r\n  }\r\n\r\n  // signIn function to call signIn api\r\n  signIn(signInData): void {\r\n    this.apiService.login(signInData).subscribe((res) => {\r\n      if (res[`code`] === 200) {\r\n        this.authService.loginData(res); // calling authService loginData to store info in localStorage.\r\n        if (this.signUpType === 'cart') {\r\n          this.route.navigate(['/cart']); // if queryParams if from cart navigate to cart\r\n        } else if (this.signUpType === 'cartAddress') {\r\n          this.route.navigate(['/cart/deliveryAddress']); // if queryParams if from buyNow navigate to cartAddress\r\n        } else {\r\n          this.route.navigate(['/home']); // if queryParams if empty navigate to home\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"homepage\" style=\"background: #fff\">\r\n  <div class=\"sign-up\">\r\n    <div class=\"sign-up-form signUpPage\">\r\n      <form [formGroup]=\"signUpForm\" (ngSubmit)=\"submitSignUpForm(signUpForm)\">\r\n        <div class=\"sign-up-title\">\r\n          <h2>Create Account</h2>\r\n        </div>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            (formControl?.email?.errors?.pattern ||\r\n              formControl?.email?.errors?.required) &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"email\" placeholder=\"Enter Your Email Address Here\" formControlName=\"email\" required />\r\n            <img *ngIf=\"\r\n                formControl?.email?.valid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.email?.invalid &&\r\n                (formControl?.email?.touched || formControl?.email?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.email?.invalid &&\r\n            (formControl?.email?.touched || formControl?.email?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.required\">\r\n            Email Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.email?.errors.pattern\">\r\n            Enter valid email(abc@abc.abc)\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\">\r\n          <div class=\"radio-input\">\r\n            <div>\r\n              <input type=\"radio\" id=\"endUser\" value=\"End User\" formControlName=\"user_type\" />\r\n              <label for=\"endUser\">End User</label>\r\n            </div>\r\n            <div>\r\n              <input type=\"radio\" id=\"dealer\" value=\"Dealer\" formControlName=\"user_type\" />\r\n              <label for=\"dealer\">Dealer/Reseller</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.name?.errors?.required &&\r\n            (formControl?.name?.touched || formControl?.name?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.name?.valid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"text\" placeholder=\"Enter Your Full Name Here\" formControlName=\"name\" appTextOnly required />\r\n            <img *ngIf=\"\r\n                formControl?.name?.valid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.name?.invalid &&\r\n                (formControl?.name?.touched || formControl?.name?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.name?.invalid &&\r\n            (formControl?.name?.touched || formControl?.name?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.name?.errors.required\">\r\n            Name Is Required\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.company_name?.invalid &&\r\n            (formControl?.company_name?.touched ||\r\n              formControl?.company_name?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.company_name?.valid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"text\" placeholder=\"Enter Company Name\" formControlName=\"company_name\" />\r\n            <img *ngIf=\"\r\n                formControl?.company_name?.valid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.company_name?.invalid &&\r\n                (formControl?.company_name?.touched ||\r\n                  formControl?.company_name?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.company_name?.invalid &&\r\n            (formControl?.company_name?.touched ||\r\n              formControl?.company_name?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.company_name?.errors.minlength\">\r\n            Company Name Must Be of min 4 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.password?.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"password\" placeholder=\"Enter Your Password\" formControlName=\"password\" required />\r\n            <img *ngIf=\"\r\n                formControl?.password.valid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.password.invalid &&\r\n                (formControl?.password?.touched || formControl?.password?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.password?.invalid &&\r\n            (formControl?.password?.touched || formControl?.password?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.required\">\r\n            Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.password?.errors.minlength\">\r\n            Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <div class=\"sign-field\" [ngClass]=\"\r\n            formControl?.confirm_password?.invalid &&\r\n            (formControl?.confirm_password?.touched ||\r\n              formControl?.confirm_password?.dirty)\r\n              ? 'wrong-inp'\r\n              : formControl?.confirm_password?.valid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              ? 'right-inp'\r\n              : ''\r\n          \">\r\n          \r\n          <div class=\"sign-input\">\r\n            <input type=\"password\" placeholder=\"Enter Confirm Password\" formControlName=\"confirm_password\" required />\r\n            <img *ngIf=\"\r\n                formControl?.confirm_password?.valid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              \" src=\"assets/images/icons/tick.png\" />\r\n            <img *ngIf=\"\r\n                formControl?.confirm_password?.invalid &&\r\n                (formControl?.confirm_password?.touched ||\r\n                  formControl?.confirm_password?.dirty)\r\n              \" src=\"assets/images/icons/clear.png\" />\r\n          </div>\r\n        </div>\r\n        <ng-container *ngIf=\"\r\n            formControl?.confirm_password?.invalid &&\r\n            (formControl?.confirm_password?.touched ||\r\n              formControl?.confirm_password?.dirty)\r\n          \">\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.confirm_password?.errors.required\">\r\n            Confirm Password Is Required\r\n          </p>\r\n          <p class=\"error-msg\" *ngIf=\"formControl?.confirm_password?.errors.minlength\">\r\n            Confirm Password Must Be of min 6 characters\r\n          </p>\r\n        </ng-container>\r\n\r\n        <button type=\"submit\">Sign Up</button>\r\n        <div class=\"already-acc\">\r\n          Already have an account?\r\n          <a href=\"javascript:void(0)\" [routerLink]=\"['/sign-in']\">Sign In</a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\n\r\nconst routes: Routes = [\r\n  {path: 'sign-in', component: SignInComponent},\r\n  {path: 'sign-up', component: SignUpComponent},\r\n  {path: 'forget-password', component: ForgetPasswordComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n"]}